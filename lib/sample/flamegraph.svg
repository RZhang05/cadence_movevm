<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="949.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="2500"><g><title>[ld-linux-x86-64.so.2] (140 samples, 5.60%)</title><rect x="7.2000%" y="805" width="5.6000%" height="15" fill="rgb(227,0,7)" fg:x="180" fg:w="140"/><text x="7.4500%" y="815.50">[ld-lin..</text></g><g><title>[ld-linux-x86-64.so.2] (100 samples, 4.00%)</title><rect x="8.8000%" y="789" width="4.0000%" height="15" fill="rgb(217,0,24)" fg:x="220" fg:w="100"/><text x="9.0500%" y="799.50">[ld-..</text></g><g><title>[ld-linux-x86-64.so.2] (20 samples, 0.80%)</title><rect x="12.0000%" y="773" width="0.8000%" height="15" fill="rgb(221,193,54)" fg:x="300" fg:w="20"/><text x="12.2500%" y="783.50"></text></g><g><title>_dl_catch_exception (20 samples, 0.80%)</title><rect x="12.8000%" y="805" width="0.8000%" height="15" fill="rgb(248,212,6)" fg:x="320" fg:w="20"/><text x="13.0500%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (20 samples, 0.80%)</title><rect x="12.8000%" y="789" width="0.8000%" height="15" fill="rgb(208,68,35)" fg:x="320" fg:w="20"/><text x="13.0500%" y="799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (20 samples, 0.80%)</title><rect x="12.8000%" y="773" width="0.8000%" height="15" fill="rgb(232,128,0)" fg:x="320" fg:w="20"/><text x="13.0500%" y="783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (20 samples, 0.80%)</title><rect x="12.8000%" y="757" width="0.8000%" height="15" fill="rgb(207,160,47)" fg:x="320" fg:w="20"/><text x="13.0500%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (20 samples, 0.80%)</title><rect x="12.8000%" y="741" width="0.8000%" height="15" fill="rgb(228,23,34)" fg:x="320" fg:w="20"/><text x="13.0500%" y="751.50"></text></g><g><title>[ld-linux-x86-64.so.2] (20 samples, 0.80%)</title><rect x="12.8000%" y="725" width="0.8000%" height="15" fill="rgb(218,30,26)" fg:x="320" fg:w="20"/><text x="13.0500%" y="735.50"></text></g><g><title>[ld-linux-x86-64.so.2] (260 samples, 10.40%)</title><rect x="4.0000%" y="821" width="10.4000%" height="15" fill="rgb(220,122,19)" fg:x="100" fg:w="260"/><text x="4.2500%" y="831.50">[ld-linux-x86-6..</text></g><g><title>cosf32 (20 samples, 0.80%)</title><rect x="13.6000%" y="805" width="0.8000%" height="15" fill="rgb(250,228,42)" fg:x="340" fg:w="20"/><text x="13.8500%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (380 samples, 15.20%)</title><rect x="0.0000%" y="885" width="15.2000%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="380"/><text x="0.2500%" y="895.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (380 samples, 15.20%)</title><rect x="0.0000%" y="869" width="15.2000%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="380"/><text x="0.2500%" y="879.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (340 samples, 13.60%)</title><rect x="1.6000%" y="853" width="13.6000%" height="15" fill="rgb(206,188,39)" fg:x="40" fg:w="340"/><text x="1.8500%" y="863.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (340 samples, 13.60%)</title><rect x="1.6000%" y="837" width="13.6000%" height="15" fill="rgb(217,207,13)" fg:x="40" fg:w="340"/><text x="1.8500%" y="847.50">[ld-linux-x86-64.so.2]</text></g><g><title>_dl_allocate_tls_init (20 samples, 0.80%)</title><rect x="14.4000%" y="821" width="0.8000%" height="15" fill="rgb(231,73,38)" fg:x="360" fg:w="20"/><text x="14.6500%" y="831.50"></text></g><g><title>[ld-linux-x86-64.so.2] (20 samples, 0.80%)</title><rect x="14.4000%" y="805" width="0.8000%" height="15" fill="rgb(225,20,46)" fg:x="360" fg:w="20"/><text x="14.6500%" y="815.50"></text></g><g><title>move_vm_runtime::loader::LoaderV1::load_and_verify_module (20 samples, 0.80%)</title><rect x="15.2000%" y="517" width="0.8000%" height="15" fill="rgb(210,31,41)" fg:x="380" fg:w="20"/><text x="15.4500%" y="527.50"></text></g><g><title>move_bytecode_verifier::verifier::verify_module_with_config (20 samples, 0.80%)</title><rect x="15.2000%" y="501" width="0.8000%" height="15" fill="rgb(221,200,47)" fg:x="380" fg:w="20"/><text x="15.4500%" y="511.50"></text></g><g><title>std::panic::catch_unwind (20 samples, 0.80%)</title><rect x="15.2000%" y="485" width="0.8000%" height="15" fill="rgb(226,26,5)" fg:x="380" fg:w="20"/><text x="15.4500%" y="495.50"></text></g><g><title>std::panicking::try (20 samples, 0.80%)</title><rect x="15.2000%" y="469" width="0.8000%" height="15" fill="rgb(249,33,26)" fg:x="380" fg:w="20"/><text x="15.4500%" y="479.50"></text></g><g><title>std::panicking::try::do_call (20 samples, 0.80%)</title><rect x="15.2000%" y="453" width="0.8000%" height="15" fill="rgb(235,183,28)" fg:x="380" fg:w="20"/><text x="15.4500%" y="463.50"></text></g><g><title>move_bytecode_verifier::verifier::verify_module_with_config::_{{closure}} (20 samples, 0.80%)</title><rect x="15.2000%" y="437" width="0.8000%" height="15" fill="rgb(221,5,38)" fg:x="380" fg:w="20"/><text x="15.4500%" y="447.50"></text></g><g><title>move_bytecode_verifier::code_unit_verifier::CodeUnitVerifier::verify_module (20 samples, 0.80%)</title><rect x="15.2000%" y="421" width="0.8000%" height="15" fill="rgb(247,18,42)" fg:x="380" fg:w="20"/><text x="15.4500%" y="431.50"></text></g><g><title>move_bytecode_verifier::code_unit_verifier::CodeUnitVerifier::verify_module_impl (20 samples, 0.80%)</title><rect x="15.2000%" y="405" width="0.8000%" height="15" fill="rgb(241,131,45)" fg:x="380" fg:w="20"/><text x="15.4500%" y="415.50"></text></g><g><title>move_bytecode_verifier::code_unit_verifier::CodeUnitVerifier::verify_function (20 samples, 0.80%)</title><rect x="15.2000%" y="389" width="0.8000%" height="15" fill="rgb(249,31,29)" fg:x="380" fg:w="20"/><text x="15.4500%" y="399.50"></text></g><g><title>move_bytecode_verifier::code_unit_verifier::CodeUnitVerifier::verify_common (20 samples, 0.80%)</title><rect x="15.2000%" y="373" width="0.8000%" height="15" fill="rgb(225,111,53)" fg:x="380" fg:w="20"/><text x="15.4500%" y="383.50"></text></g><g><title>move_bytecode_verifier::type_safety::verify (20 samples, 0.80%)</title><rect x="15.2000%" y="357" width="0.8000%" height="15" fill="rgb(238,160,17)" fg:x="380" fg:w="20"/><text x="15.4500%" y="367.50"></text></g><g><title>move_bytecode_verifier::type_safety::verify_instr (20 samples, 0.80%)</title><rect x="15.2000%" y="341" width="0.8000%" height="15" fill="rgb(214,148,48)" fg:x="380" fg:w="20"/><text x="15.4500%" y="351.50"></text></g><g><title>move_bytecode_verifier::type_safety::TypeSafetyChecker::push (20 samples, 0.80%)</title><rect x="15.2000%" y="325" width="0.8000%" height="15" fill="rgb(232,36,49)" fg:x="380" fg:w="20"/><text x="15.4500%" y="335.50"></text></g><g><title>move_bytecode_verifier::type_safety::TypeSafetyChecker::charge_ty (20 samples, 0.80%)</title><rect x="15.2000%" y="309" width="0.8000%" height="15" fill="rgb(209,103,24)" fg:x="380" fg:w="20"/><text x="15.4500%" y="319.50"></text></g><g><title>move_binary_format::file_format::SignatureToken::preorder_traversal (20 samples, 0.80%)</title><rect x="15.2000%" y="293" width="0.8000%" height="15" fill="rgb(229,88,8)" fg:x="380" fg:w="20"/><text x="15.4500%" y="303.50"></text></g><g><title>[libc.so.6] (40 samples, 1.60%)</title><rect x="15.2000%" y="869" width="1.6000%" height="15" fill="rgb(213,181,19)" fg:x="380" fg:w="40"/><text x="15.4500%" y="879.50"></text></g><g><title>main (40 samples, 1.60%)</title><rect x="15.2000%" y="853" width="1.6000%" height="15" fill="rgb(254,191,54)" fg:x="380" fg:w="40"/><text x="15.4500%" y="863.50"></text></g><g><title>std::rt::lang_start_internal (40 samples, 1.60%)</title><rect x="15.2000%" y="837" width="1.6000%" height="15" fill="rgb(241,83,37)" fg:x="380" fg:w="40"/><text x="15.4500%" y="847.50"></text></g><g><title>std::panic::catch_unwind (40 samples, 1.60%)</title><rect x="15.2000%" y="821" width="1.6000%" height="15" fill="rgb(233,36,39)" fg:x="380" fg:w="40"/><text x="15.4500%" y="831.50"></text></g><g><title>std::panicking::try (40 samples, 1.60%)</title><rect x="15.2000%" y="805" width="1.6000%" height="15" fill="rgb(226,3,54)" fg:x="380" fg:w="40"/><text x="15.4500%" y="815.50"></text></g><g><title>std::panicking::try::do_call (40 samples, 1.60%)</title><rect x="15.2000%" y="789" width="1.6000%" height="15" fill="rgb(245,192,40)" fg:x="380" fg:w="40"/><text x="15.4500%" y="799.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (40 samples, 1.60%)</title><rect x="15.2000%" y="773" width="1.6000%" height="15" fill="rgb(238,167,29)" fg:x="380" fg:w="40"/><text x="15.4500%" y="783.50"></text></g><g><title>std::panic::catch_unwind (40 samples, 1.60%)</title><rect x="15.2000%" y="757" width="1.6000%" height="15" fill="rgb(232,182,51)" fg:x="380" fg:w="40"/><text x="15.4500%" y="767.50"></text></g><g><title>std::panicking::try (40 samples, 1.60%)</title><rect x="15.2000%" y="741" width="1.6000%" height="15" fill="rgb(231,60,39)" fg:x="380" fg:w="40"/><text x="15.4500%" y="751.50"></text></g><g><title>std::panicking::try::do_call (40 samples, 1.60%)</title><rect x="15.2000%" y="725" width="1.6000%" height="15" fill="rgb(208,69,12)" fg:x="380" fg:w="40"/><text x="15.4500%" y="735.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (40 samples, 1.60%)</title><rect x="15.2000%" y="709" width="1.6000%" height="15" fill="rgb(235,93,37)" fg:x="380" fg:w="40"/><text x="15.4500%" y="719.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (40 samples, 1.60%)</title><rect x="15.2000%" y="693" width="1.6000%" height="15" fill="rgb(213,116,39)" fg:x="380" fg:w="40"/><text x="15.4500%" y="703.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (40 samples, 1.60%)</title><rect x="15.2000%" y="677" width="1.6000%" height="15" fill="rgb(222,207,29)" fg:x="380" fg:w="40"/><text x="15.4500%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once (40 samples, 1.60%)</title><rect x="15.2000%" y="661" width="1.6000%" height="15" fill="rgb(206,96,30)" fg:x="380" fg:w="40"/><text x="15.4500%" y="671.50"></text></g><g><title>sample::main (40 samples, 1.60%)</title><rect x="15.2000%" y="645" width="1.6000%" height="15" fill="rgb(218,138,4)" fg:x="380" fg:w="40"/><text x="15.4500%" y="655.50"></text></g><g><title>sample::vm::run_func_M (40 samples, 1.60%)</title><rect x="15.2000%" y="629" width="1.6000%" height="15" fill="rgb(250,191,14)" fg:x="380" fg:w="40"/><text x="15.4500%" y="639.50"></text></g><g><title>move_vm_runtime::session::Session::execute_function_bypass_visibility (40 samples, 1.60%)</title><rect x="15.2000%" y="613" width="1.6000%" height="15" fill="rgb(239,60,40)" fg:x="380" fg:w="40"/><text x="15.4500%" y="623.50"></text></g><g><title>move_vm_runtime::loader::Loader::load_function (40 samples, 1.60%)</title><rect x="15.2000%" y="597" width="1.6000%" height="15" fill="rgb(206,27,48)" fg:x="380" fg:w="40"/><text x="15.4500%" y="607.50"></text></g><g><title>move_vm_runtime::loader::Loader::load_function_without_type_args (40 samples, 1.60%)</title><rect x="15.2000%" y="581" width="1.6000%" height="15" fill="rgb(225,35,8)" fg:x="380" fg:w="40"/><text x="15.4500%" y="591.50"></text></g><g><title>move_vm_runtime::loader::LoaderV1::load_module (40 samples, 1.60%)</title><rect x="15.2000%" y="565" width="1.6000%" height="15" fill="rgb(250,213,24)" fg:x="380" fg:w="40"/><text x="15.4500%" y="575.50"></text></g><g><title>move_vm_runtime::loader::LoaderV1::load_and_verify_module_and_dependencies_and_friends (40 samples, 1.60%)</title><rect x="15.2000%" y="549" width="1.6000%" height="15" fill="rgb(247,123,22)" fg:x="380" fg:w="40"/><text x="15.4500%" y="559.50"></text></g><g><title>move_vm_runtime::loader::LoaderV1::load_and_verify_module_and_dependencies (40 samples, 1.60%)</title><rect x="15.2000%" y="533" width="1.6000%" height="15" fill="rgb(231,138,38)" fg:x="380" fg:w="40"/><text x="15.4500%" y="543.50"></text></g><g><title>move_vm_runtime::loader::modules::LegacyModuleStorageAdapter::insert (20 samples, 0.80%)</title><rect x="16.0000%" y="517" width="0.8000%" height="15" fill="rgb(231,145,46)" fg:x="400" fg:w="20"/><text x="16.2500%" y="527.50"></text></g><g><title>move_vm_runtime::loader::modules::Module::new (20 samples, 0.80%)</title><rect x="16.0000%" y="501" width="0.8000%" height="15" fill="rgb(251,118,11)" fg:x="400" fg:w="20"/><text x="16.2500%" y="511.50"></text></g><g><title>&lt;prometheus::vec::MetricVec&lt;prometheus::histogram::HistogramVecBuilder&gt; as move_vm_metrics::Timer&gt;::timer_with_label (20 samples, 0.80%)</title><rect x="16.0000%" y="485" width="0.8000%" height="15" fill="rgb(217,147,25)" fg:x="400" fg:w="20"/><text x="16.2500%" y="495.50"></text></g><g><title>prometheus::histogram::Histogram::start_timer (20 samples, 0.80%)</title><rect x="16.0000%" y="469" width="0.8000%" height="15" fill="rgb(247,81,37)" fg:x="400" fg:w="20"/><text x="16.2500%" y="479.50"></text></g><g><title>prometheus::histogram::HistogramTimer::new (20 samples, 0.80%)</title><rect x="16.0000%" y="453" width="0.8000%" height="15" fill="rgb(209,12,38)" fg:x="400" fg:w="20"/><text x="16.2500%" y="463.50"></text></g><g><title>prometheus::histogram::Instant::now (20 samples, 0.80%)</title><rect x="16.0000%" y="437" width="0.8000%" height="15" fill="rgb(227,1,9)" fg:x="400" fg:w="20"/><text x="16.2500%" y="447.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (20 samples, 0.80%)</title><rect x="16.0000%" y="421" width="0.8000%" height="15" fill="rgb(248,47,43)" fg:x="400" fg:w="20"/><text x="16.2500%" y="431.50"></text></g><g><title>clock_gettime (20 samples, 0.80%)</title><rect x="16.0000%" y="405" width="0.8000%" height="15" fill="rgb(221,10,30)" fg:x="400" fg:w="20"/><text x="16.2500%" y="415.50"></text></g><g><title>__vdso_clock_gettime (20 samples, 0.80%)</title><rect x="16.0000%" y="389" width="0.8000%" height="15" fill="rgb(210,229,1)" fg:x="400" fg:w="20"/><text x="16.2500%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (20 samples, 0.80%)</title><rect x="25.6000%" y="725" width="0.8000%" height="15" fill="rgb(222,148,37)" fg:x="640" fg:w="20"/><text x="25.8500%" y="735.50"></text></g><g><title>move_vm_runtime::interpreter::Stack::push_ty (60 samples, 2.40%)</title><rect x="26.4000%" y="725" width="2.4000%" height="15" fill="rgb(234,67,33)" fg:x="660" fg:w="60"/><text x="26.6500%" y="735.50">mo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (60 samples, 2.40%)</title><rect x="26.4000%" y="709" width="2.4000%" height="15" fill="rgb(247,98,35)" fg:x="660" fg:w="60"/><text x="26.6500%" y="719.50">al..</text></g><g><title>core::ptr::write (20 samples, 0.80%)</title><rect x="28.0000%" y="693" width="0.8000%" height="15" fill="rgb(247,138,52)" fg:x="700" fg:w="20"/><text x="28.2500%" y="703.50"></text></g><g><title>move_vm_runtime::loader::Loader::ty_builder (20 samples, 0.80%)</title><rect x="28.8000%" y="725" width="0.8000%" height="15" fill="rgb(213,79,30)" fg:x="720" fg:w="20"/><text x="29.0500%" y="735.50"></text></g><g><title>move_vm_runtime::interpreter::Frame::post_execution_type_stack_transition (300 samples, 12.00%)</title><rect x="18.4000%" y="741" width="12.0000%" height="15" fill="rgb(246,177,23)" fg:x="460" fg:w="300"/><text x="18.6500%" y="751.50">move_vm_runtime::i..</text></g><g><title>move_vm_types::loaded_data::runtime_types::Type::paranoid_check_has_ability (20 samples, 0.80%)</title><rect x="29.6000%" y="725" width="0.8000%" height="15" fill="rgb(230,62,27)" fg:x="740" fg:w="20"/><text x="29.8500%" y="735.50"></text></g><g><title>move_vm_types::loaded_data::runtime_types::Type::abilities (20 samples, 0.80%)</title><rect x="29.6000%" y="709" width="0.8000%" height="15" fill="rgb(216,154,8)" fg:x="740" fg:w="20"/><text x="29.8500%" y="719.50"></text></g><g><title>move_vm_runtime::interpreter::Frame::pre_execution_type_stack_transition (40 samples, 1.60%)</title><rect x="30.4000%" y="741" width="1.6000%" height="15" fill="rgb(244,35,45)" fg:x="760" fg:w="40"/><text x="30.6500%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (40 samples, 1.60%)</title><rect x="32.0000%" y="693" width="1.6000%" height="15" fill="rgb(251,115,12)" fg:x="800" fg:w="40"/><text x="32.2500%" y="703.50"></text></g><g><title>move_vm_runtime::interpreter::Interpreter::binop_bool (60 samples, 2.40%)</title><rect x="32.0000%" y="741" width="2.4000%" height="15" fill="rgb(240,54,50)" fg:x="800" fg:w="60"/><text x="32.2500%" y="751.50">mo..</text></g><g><title>move_vm_runtime::interpreter::Interpreter::binop (60 samples, 2.40%)</title><rect x="32.0000%" y="725" width="2.4000%" height="15" fill="rgb(233,84,52)" fg:x="800" fg:w="60"/><text x="32.2500%" y="735.50">mo..</text></g><g><title>move_vm_runtime::interpreter::Stack::pop_as (60 samples, 2.40%)</title><rect x="32.0000%" y="709" width="2.4000%" height="15" fill="rgb(207,117,47)" fg:x="800" fg:w="60"/><text x="32.2500%" y="719.50">mo..</text></g><g><title>move_vm_types::values::values_impl::Value::value_as (20 samples, 0.80%)</title><rect x="33.6000%" y="693" width="0.8000%" height="15" fill="rgb(249,43,39)" fg:x="840" fg:w="20"/><text x="33.8500%" y="703.50"></text></g><g><title>&lt;move_vm_types::values::values_impl::Value as move_vm_types::values::values_impl::VMValueCast&lt;move_vm_types::values::values_impl::IntegerValue&gt;&gt;::cast (20 samples, 0.80%)</title><rect x="33.6000%" y="677" width="0.8000%" height="15" fill="rgb(209,38,44)" fg:x="840" fg:w="20"/><text x="33.8500%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;move_vm_types::values::values_impl::ValueImpl&gt; (20 samples, 0.80%)</title><rect x="33.6000%" y="661" width="0.8000%" height="15" fill="rgb(236,212,23)" fg:x="840" fg:w="20"/><text x="33.8500%" y="671.50"></text></g><g><title>move_vm_types::values::values_impl::IntegerValue::add_checked (20 samples, 0.80%)</title><rect x="34.4000%" y="677" width="0.8000%" height="15" fill="rgb(242,79,21)" fg:x="860" fg:w="20"/><text x="34.6500%" y="687.50"></text></g><g><title>move_vm_runtime::interpreter::Interpreter::binop_int::_{{closure}} (40 samples, 1.60%)</title><rect x="34.4000%" y="709" width="1.6000%" height="15" fill="rgb(211,96,35)" fg:x="860" fg:w="40"/><text x="34.6500%" y="719.50"></text></g><g><title>core::ops::function::FnOnce::call_once (40 samples, 1.60%)</title><rect x="34.4000%" y="693" width="1.6000%" height="15" fill="rgb(253,215,40)" fg:x="860" fg:w="40"/><text x="34.6500%" y="703.50"></text></g><g><title>move_vm_types::values::values_impl::IntegerValue::sub_checked (20 samples, 0.80%)</title><rect x="35.2000%" y="677" width="0.8000%" height="15" fill="rgb(211,81,21)" fg:x="880" fg:w="20"/><text x="35.4500%" y="687.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (20 samples, 0.80%)</title><rect x="36.0000%" y="693" width="0.8000%" height="15" fill="rgb(208,190,38)" fg:x="900" fg:w="20"/><text x="36.2500%" y="703.50"></text></g><g><title>move_vm_runtime::interpreter::Interpreter::binop_int (100 samples, 4.00%)</title><rect x="34.4000%" y="741" width="4.0000%" height="15" fill="rgb(235,213,38)" fg:x="860" fg:w="100"/><text x="34.6500%" y="751.50">move..</text></g><g><title>move_vm_runtime::interpreter::Interpreter::binop (100 samples, 4.00%)</title><rect x="34.4000%" y="725" width="4.0000%" height="15" fill="rgb(237,122,38)" fg:x="860" fg:w="100"/><text x="34.6500%" y="735.50">move..</text></g><g><title>move_vm_runtime::interpreter::Stack::pop_as (60 samples, 2.40%)</title><rect x="36.0000%" y="709" width="2.4000%" height="15" fill="rgb(244,218,35)" fg:x="900" fg:w="60"/><text x="36.2500%" y="719.50">mo..</text></g><g><title>move_vm_types::values::values_impl::Value::value_as (40 samples, 1.60%)</title><rect x="36.8000%" y="693" width="1.6000%" height="15" fill="rgb(240,68,47)" fg:x="920" fg:w="40"/><text x="37.0500%" y="703.50"></text></g><g><title>&lt;move_vm_types::values::values_impl::Value as move_vm_types::values::values_impl::VMValueCast&lt;move_vm_types::values::values_impl::IntegerValue&gt;&gt;::cast (40 samples, 1.60%)</title><rect x="36.8000%" y="677" width="1.6000%" height="15" fill="rgb(210,16,53)" fg:x="920" fg:w="40"/><text x="37.0500%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;move_vm_types::values::values_impl::ValueImpl&gt; (20 samples, 0.80%)</title><rect x="37.6000%" y="661" width="0.8000%" height="15" fill="rgb(235,124,12)" fg:x="940" fg:w="20"/><text x="37.8500%" y="671.50"></text></g><g><title>move_vm_runtime::interpreter::Stack::check_balance (40 samples, 1.60%)</title><rect x="38.4000%" y="741" width="1.6000%" height="15" fill="rgb(224,169,11)" fg:x="960" fg:w="40"/><text x="38.6500%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (40 samples, 1.60%)</title><rect x="38.4000%" y="725" width="1.6000%" height="15" fill="rgb(250,166,2)" fg:x="960" fg:w="40"/><text x="38.6500%" y="735.50"></text></g><g><title>move_vm_runtime::interpreter::Stack::push (220 samples, 8.80%)</title><rect x="40.0000%" y="741" width="8.8000%" height="15" fill="rgb(242,216,29)" fg:x="1000" fg:w="220"/><text x="40.2500%" y="751.50">move_vm_runt..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (160 samples, 6.40%)</title><rect x="42.4000%" y="725" width="6.4000%" height="15" fill="rgb(230,116,27)" fg:x="1060" fg:w="160"/><text x="42.6500%" y="735.50">alloc::v..</text></g><g><title>core::ptr::write (160 samples, 6.40%)</title><rect x="42.4000%" y="709" width="6.4000%" height="15" fill="rgb(228,99,48)" fg:x="1060" fg:w="160"/><text x="42.6500%" y="719.50">core::pt..</text></g><g><title>move_vm_runtime::loader::function::LoadedFunction::code (20 samples, 0.80%)</title><rect x="48.8000%" y="741" width="0.8000%" height="15" fill="rgb(253,11,6)" fg:x="1220" fg:w="20"/><text x="49.0500%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.80%)</title><rect x="48.8000%" y="725" width="0.8000%" height="15" fill="rgb(247,143,39)" fg:x="1220" fg:w="20"/><text x="49.0500%" y="735.50"></text></g><g><title>move_vm_types::values::values_impl::Locals::copy_loc (20 samples, 0.80%)</title><rect x="49.6000%" y="741" width="0.8000%" height="15" fill="rgb(236,97,10)" fg:x="1240" fg:w="20"/><text x="49.8500%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (20 samples, 0.80%)</title><rect x="49.6000%" y="725" width="0.8000%" height="15" fill="rgb(233,208,19)" fg:x="1240" fg:w="20"/><text x="49.8500%" y="735.50"></text></g><g><title>[unknown] (900 samples, 36.00%)</title><rect x="15.2000%" y="885" width="36.0000%" height="15" fill="rgb(216,164,2)" fg:x="380" fg:w="900"/><text x="15.4500%" y="895.50">[unknown]</text></g><g><title>sample::vm::run_func_M (860 samples, 34.40%)</title><rect x="16.8000%" y="869" width="34.4000%" height="15" fill="rgb(220,129,5)" fg:x="420" fg:w="860"/><text x="17.0500%" y="879.50">sample::vm::run_func_M</text></g><g><title>move_vm_runtime::session::Session::execute_function_bypass_visibility (860 samples, 34.40%)</title><rect x="16.8000%" y="853" width="34.4000%" height="15" fill="rgb(242,17,10)" fg:x="420" fg:w="860"/><text x="17.0500%" y="863.50">move_vm_runtime::session::Session::execute_function_bypa..</text></g><g><title>move_vm_runtime::runtime::VMRuntime::execute_function_instantiation (860 samples, 34.40%)</title><rect x="16.8000%" y="837" width="34.4000%" height="15" fill="rgb(242,107,0)" fg:x="420" fg:w="860"/><text x="17.0500%" y="847.50">move_vm_runtime::runtime::VMRuntime::execute_function_in..</text></g><g><title>move_vm_runtime::runtime::VMRuntime::execute_function_impl (860 samples, 34.40%)</title><rect x="16.8000%" y="821" width="34.4000%" height="15" fill="rgb(251,28,31)" fg:x="420" fg:w="860"/><text x="17.0500%" y="831.50">move_vm_runtime::runtime::VMRuntime::execute_function_im..</text></g><g><title>move_vm_runtime::interpreter::Interpreter::entrypoint (860 samples, 34.40%)</title><rect x="16.8000%" y="805" width="34.4000%" height="15" fill="rgb(233,223,10)" fg:x="420" fg:w="860"/><text x="17.0500%" y="815.50">move_vm_runtime::interpreter::Interpreter::entrypoint</text></g><g><title>move_vm_runtime::interpreter::Interpreter::execute_main (860 samples, 34.40%)</title><rect x="16.8000%" y="789" width="34.4000%" height="15" fill="rgb(215,21,27)" fg:x="420" fg:w="860"/><text x="17.0500%" y="799.50">move_vm_runtime::interpreter::Interpreter::execute_main</text></g><g><title>move_vm_runtime::interpreter::Frame::execute_code (860 samples, 34.40%)</title><rect x="16.8000%" y="773" width="34.4000%" height="15" fill="rgb(232,23,21)" fg:x="420" fg:w="860"/><text x="17.0500%" y="783.50">move_vm_runtime::interpreter::Frame::execute_code</text></g><g><title>move_vm_runtime::interpreter::Frame::execute_code_impl (860 samples, 34.40%)</title><rect x="16.8000%" y="757" width="34.4000%" height="15" fill="rgb(244,5,23)" fg:x="420" fg:w="860"/><text x="17.0500%" y="767.50">move_vm_runtime::interpreter::Frame::execute_code_impl</text></g><g><title>move_vm_types::values::values_impl::Locals::move_loc (20 samples, 0.80%)</title><rect x="50.4000%" y="741" width="0.8000%" height="15" fill="rgb(226,81,46)" fg:x="1260" fg:w="20"/><text x="50.6500%" y="751.50"></text></g><g><title>move_vm_types::values::values_impl::Locals::swap_loc (20 samples, 0.80%)</title><rect x="50.4000%" y="725" width="0.8000%" height="15" fill="rgb(247,70,30)" fg:x="1260" fg:w="20"/><text x="50.6500%" y="735.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (20 samples, 0.80%)</title><rect x="50.4000%" y="709" width="0.8000%" height="15" fill="rgb(212,68,19)" fg:x="1260" fg:w="20"/><text x="50.6500%" y="719.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (20 samples, 0.80%)</title><rect x="50.4000%" y="693" width="0.8000%" height="15" fill="rgb(240,187,13)" fg:x="1260" fg:w="20"/><text x="50.6500%" y="703.50"></text></g><g><title>core::cell::BorrowRefMut::new (20 samples, 0.80%)</title><rect x="50.4000%" y="677" width="0.8000%" height="15" fill="rgb(223,113,26)" fg:x="1260" fg:w="20"/><text x="50.6500%" y="687.50"></text></g><g><title>exit (40 samples, 1.60%)</title><rect x="51.2000%" y="837" width="1.6000%" height="15" fill="rgb(206,192,2)" fg:x="1280" fg:w="40"/><text x="51.4500%" y="847.50"></text></g><g><title>[libc.so.6] (40 samples, 1.60%)</title><rect x="51.2000%" y="821" width="1.6000%" height="15" fill="rgb(241,108,4)" fg:x="1280" fg:w="40"/><text x="51.4500%" y="831.50"></text></g><g><title>[ld-linux-x86-64.so.2] (40 samples, 1.60%)</title><rect x="51.2000%" y="805" width="1.6000%" height="15" fill="rgb(247,173,49)" fg:x="1280" fg:w="40"/><text x="51.4500%" y="815.50"></text></g><g><title>core::ops::function::FnOnce::call_once (20 samples, 0.80%)</title><rect x="52.8000%" y="757" width="0.8000%" height="15" fill="rgb(224,114,35)" fg:x="1320" fg:w="20"/><text x="53.0500%" y="767.50"></text></g><g><title>std::rt::cleanup (20 samples, 0.80%)</title><rect x="52.8000%" y="741" width="0.8000%" height="15" fill="rgb(245,159,27)" fg:x="1320" fg:w="20"/><text x="53.0500%" y="751.50"></text></g><g><title>std::sync::once::Once::call_once (20 samples, 0.80%)</title><rect x="52.8000%" y="725" width="0.8000%" height="15" fill="rgb(245,172,44)" fg:x="1320" fg:w="20"/><text x="53.0500%" y="735.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (20 samples, 0.80%)</title><rect x="52.8000%" y="709" width="0.8000%" height="15" fill="rgb(236,23,11)" fg:x="1320" fg:w="20"/><text x="53.0500%" y="719.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (20 samples, 0.80%)</title><rect x="52.8000%" y="693" width="0.8000%" height="15" fill="rgb(205,117,38)" fg:x="1320" fg:w="20"/><text x="53.0500%" y="703.50"></text></g><g><title>std::rt::cleanup::_{{closure}} (20 samples, 0.80%)</title><rect x="52.8000%" y="677" width="0.8000%" height="15" fill="rgb(237,72,25)" fg:x="1320" fg:w="20"/><text x="53.0500%" y="687.50"></text></g><g><title>std::io::stdio::cleanup (20 samples, 0.80%)</title><rect x="52.8000%" y="661" width="0.8000%" height="15" fill="rgb(244,70,9)" fg:x="1320" fg:w="20"/><text x="53.0500%" y="671.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_init (20 samples, 0.80%)</title><rect x="52.8000%" y="645" width="0.8000%" height="15" fill="rgb(217,125,39)" fg:x="1320" fg:w="20"/><text x="53.0500%" y="655.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_try_init (20 samples, 0.80%)</title><rect x="52.8000%" y="629" width="0.8000%" height="15" fill="rgb(235,36,10)" fg:x="1320" fg:w="20"/><text x="53.0500%" y="639.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::initialize (20 samples, 0.80%)</title><rect x="52.8000%" y="613" width="0.8000%" height="15" fill="rgb(251,123,47)" fg:x="1320" fg:w="20"/><text x="53.0500%" y="623.50"></text></g><g><title>std::sync::once::Once::call_once_force (20 samples, 0.80%)</title><rect x="52.8000%" y="597" width="0.8000%" height="15" fill="rgb(221,13,13)" fg:x="1320" fg:w="20"/><text x="53.0500%" y="607.50"></text></g><g><title>std::sys::sync::once::futex::Once::is_completed (20 samples, 0.80%)</title><rect x="52.8000%" y="581" width="0.8000%" height="15" fill="rgb(238,131,9)" fg:x="1320" fg:w="20"/><text x="53.0500%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (20 samples, 0.80%)</title><rect x="52.8000%" y="565" width="0.8000%" height="15" fill="rgb(211,50,8)" fg:x="1320" fg:w="20"/><text x="53.0500%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.80%)</title><rect x="52.8000%" y="549" width="0.8000%" height="15" fill="rgb(245,182,24)" fg:x="1320" fg:w="20"/><text x="53.0500%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (20 samples, 0.80%)</title><rect x="53.6000%" y="597" width="0.8000%" height="15" fill="rgb(242,14,37)" fg:x="1340" fg:w="20"/><text x="53.8500%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.80%)</title><rect x="53.6000%" y="581" width="0.8000%" height="15" fill="rgb(246,228,12)" fg:x="1340" fg:w="20"/><text x="53.8500%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;move_vm_runtime::session::Session&gt; (20 samples, 0.80%)</title><rect x="54.4000%" y="597" width="0.8000%" height="15" fill="rgb(213,55,15)" fg:x="1360" fg:w="20"/><text x="54.6500%" y="607.50"></text></g><g><title>move_binary_format::check_bounds::BoundsChecker::verify_module (20 samples, 0.80%)</title><rect x="55.2000%" y="501" width="0.8000%" height="15" fill="rgb(209,9,3)" fg:x="1380" fg:w="20"/><text x="55.4500%" y="511.50"></text></g><g><title>move_binary_format::check_bounds::BoundsChecker::verify_impl (20 samples, 0.80%)</title><rect x="55.2000%" y="485" width="0.8000%" height="15" fill="rgb(230,59,30)" fg:x="1380" fg:w="20"/><text x="55.4500%" y="495.50"></text></g><g><title>move_binary_format::binary_views::BinaryIndexedView::variant_field_instantiations (20 samples, 0.80%)</title><rect x="55.2000%" y="469" width="0.8000%" height="15" fill="rgb(209,121,21)" fg:x="1380" fg:w="20"/><text x="55.4500%" y="479.50"></text></g><g><title>move_binary_format::deserializer::build_compiled_module (20 samples, 0.80%)</title><rect x="56.0000%" y="485" width="0.8000%" height="15" fill="rgb(220,109,13)" fg:x="1400" fg:w="20"/><text x="56.2500%" y="495.50"></text></g><g><title>move_binary_format::deserializer::build_common_tables (20 samples, 0.80%)</title><rect x="56.0000%" y="469" width="0.8000%" height="15" fill="rgb(232,18,1)" fg:x="1400" fg:w="20"/><text x="56.2500%" y="479.50"></text></g><g><title>move_binary_format::deserializer::Table::load (20 samples, 0.80%)</title><rect x="56.0000%" y="453" width="0.8000%" height="15" fill="rgb(215,41,42)" fg:x="1400" fg:w="20"/><text x="56.2500%" y="463.50"></text></g><g><title>core::ops::function::Fn::call (20 samples, 0.80%)</title><rect x="56.0000%" y="437" width="0.8000%" height="15" fill="rgb(224,123,36)" fg:x="1400" fg:w="20"/><text x="56.2500%" y="447.50"></text></g><g><title>move_binary_format::deserializer::load_identifier (20 samples, 0.80%)</title><rect x="56.0000%" y="421" width="0.8000%" height="15" fill="rgb(240,125,3)" fg:x="1400" fg:w="20"/><text x="56.2500%" y="431.50"></text></g><g><title>move_core_types::identifier::Identifier::from_utf8 (20 samples, 0.80%)</title><rect x="56.0000%" y="405" width="0.8000%" height="15" fill="rgb(205,98,50)" fg:x="1400" fg:w="20"/><text x="56.2500%" y="415.50"></text></g><g><title>move_core_types::identifier::Identifier::new (20 samples, 0.80%)</title><rect x="56.0000%" y="389" width="0.8000%" height="15" fill="rgb(205,185,37)" fg:x="1400" fg:w="20"/><text x="56.2500%" y="399.50"></text></g><g><title>move_core_types::identifier::Identifier::is_valid (20 samples, 0.80%)</title><rect x="56.0000%" y="373" width="0.8000%" height="15" fill="rgb(238,207,15)" fg:x="1400" fg:w="20"/><text x="56.2500%" y="383.50"></text></g><g><title>move_core_types::identifier::is_valid (20 samples, 0.80%)</title><rect x="56.0000%" y="357" width="0.8000%" height="15" fill="rgb(213,199,42)" fg:x="1400" fg:w="20"/><text x="56.2500%" y="367.50"></text></g><g><title>move_binary_format::deserializer::&lt;impl move_binary_format::file_format::CompiledModule&gt;::deserialize (60 samples, 2.40%)</title><rect x="55.2000%" y="597" width="2.4000%" height="15" fill="rgb(235,201,11)" fg:x="1380" fg:w="60"/><text x="55.4500%" y="607.50">mo..</text></g><g><title>move_binary_format::deserializer::&lt;impl move_binary_format::file_format::CompiledModule&gt;::deserialize_with_config (60 samples, 2.40%)</title><rect x="55.2000%" y="581" width="2.4000%" height="15" fill="rgb(207,46,11)" fg:x="1380" fg:w="60"/><text x="55.4500%" y="591.50">mo..</text></g><g><title>std::panic::catch_unwind (60 samples, 2.40%)</title><rect x="55.2000%" y="565" width="2.4000%" height="15" fill="rgb(241,35,35)" fg:x="1380" fg:w="60"/><text x="55.4500%" y="575.50">st..</text></g><g><title>std::panicking::try (60 samples, 2.40%)</title><rect x="55.2000%" y="549" width="2.4000%" height="15" fill="rgb(243,32,47)" fg:x="1380" fg:w="60"/><text x="55.4500%" y="559.50">st..</text></g><g><title>std::panicking::try::do_call (60 samples, 2.40%)</title><rect x="55.2000%" y="533" width="2.4000%" height="15" fill="rgb(247,202,23)" fg:x="1380" fg:w="60"/><text x="55.4500%" y="543.50">st..</text></g><g><title>move_binary_format::deserializer::_&lt;impl move_binary_format::file_format::CompiledModule&gt;::deserialize_with_config::_{{closure}} (60 samples, 2.40%)</title><rect x="55.2000%" y="517" width="2.4000%" height="15" fill="rgb(219,102,11)" fg:x="1380" fg:w="60"/><text x="55.4500%" y="527.50">mo..</text></g><g><title>move_binary_format::deserializer::deserialize_compiled_module (40 samples, 1.60%)</title><rect x="56.0000%" y="501" width="1.6000%" height="15" fill="rgb(243,110,44)" fg:x="1400" fg:w="40"/><text x="56.2500%" y="511.50"></text></g><g><title>move_binary_format::deserializer::check_tables (20 samples, 0.80%)</title><rect x="56.8000%" y="485" width="0.8000%" height="15" fill="rgb(222,74,54)" fg:x="1420" fg:w="20"/><text x="57.0500%" y="495.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (20 samples, 0.80%)</title><rect x="56.8000%" y="469" width="0.8000%" height="15" fill="rgb(216,99,12)" fg:x="1420" fg:w="20"/><text x="57.0500%" y="479.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (20 samples, 0.80%)</title><rect x="56.8000%" y="453" width="0.8000%" height="15" fill="rgb(226,22,26)" fg:x="1420" fg:w="20"/><text x="57.0500%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (20 samples, 0.80%)</title><rect x="56.8000%" y="437" width="0.8000%" height="15" fill="rgb(217,163,10)" fg:x="1420" fg:w="20"/><text x="57.0500%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.80%)</title><rect x="56.8000%" y="421" width="0.8000%" height="15" fill="rgb(213,25,53)" fg:x="1420" fg:w="20"/><text x="57.0500%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.80%)</title><rect x="56.8000%" y="405" width="0.8000%" height="15" fill="rgb(252,105,26)" fg:x="1420" fg:w="20"/><text x="57.0500%" y="415.50"></text></g><g><title>move_binary_format::serializer::&lt;impl move_binary_format::file_format::CompiledModule&gt;::serialize_for_version (20 samples, 0.80%)</title><rect x="57.6000%" y="597" width="0.8000%" height="15" fill="rgb(220,39,43)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="607.50"></text></g><g><title>move_binary_format::serializer::ModuleSerializer::serialize_tables (20 samples, 0.80%)</title><rect x="57.6000%" y="581" width="0.8000%" height="15" fill="rgb(229,68,48)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="591.50"></text></g><g><title>move_binary_format::serializer::CommonSerializer::serialize_common_tables (20 samples, 0.80%)</title><rect x="57.6000%" y="565" width="0.8000%" height="15" fill="rgb(252,8,32)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="575.50"></text></g><g><title>move_binary_format::serializer::serialize_table (20 samples, 0.80%)</title><rect x="57.6000%" y="549" width="0.8000%" height="15" fill="rgb(223,20,43)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="559.50"></text></g><g><title>core::ops::function::Fn::call (20 samples, 0.80%)</title><rect x="57.6000%" y="533" width="0.8000%" height="15" fill="rgb(229,81,49)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="543.50"></text></g><g><title>move_binary_format::serializer::serialize_signature (20 samples, 0.80%)</title><rect x="57.6000%" y="517" width="0.8000%" height="15" fill="rgb(236,28,36)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="527.50"></text></g><g><title>move_binary_format::serializer::serialize_signature_tokens (20 samples, 0.80%)</title><rect x="57.6000%" y="501" width="0.8000%" height="15" fill="rgb(249,185,26)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="511.50"></text></g><g><title>move_binary_format::serializer::serialize_signature_size (20 samples, 0.80%)</title><rect x="57.6000%" y="485" width="0.8000%" height="15" fill="rgb(249,174,33)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="495.50"></text></g><g><title>move_binary_format::serializer::write_as_uleb128 (20 samples, 0.80%)</title><rect x="57.6000%" y="469" width="0.8000%" height="15" fill="rgb(233,201,37)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="479.50"></text></g><g><title>move_binary_format::file_format_common::write_u64_as_uleb128 (20 samples, 0.80%)</title><rect x="57.6000%" y="453" width="0.8000%" height="15" fill="rgb(221,78,26)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="463.50"></text></g><g><title>move_binary_format::file_format_common::BinaryData::push (20 samples, 0.80%)</title><rect x="57.6000%" y="437" width="0.8000%" height="15" fill="rgb(250,127,30)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20 samples, 0.80%)</title><rect x="57.6000%" y="421" width="0.8000%" height="15" fill="rgb(230,49,44)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 0.80%)</title><rect x="57.6000%" y="405" width="0.8000%" height="15" fill="rgb(229,67,23)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (20 samples, 0.80%)</title><rect x="57.6000%" y="389" width="0.8000%" height="15" fill="rgb(249,83,47)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (20 samples, 0.80%)</title><rect x="57.6000%" y="373" width="0.8000%" height="15" fill="rgb(215,43,3)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 0.80%)</title><rect x="57.6000%" y="357" width="0.8000%" height="15" fill="rgb(238,154,13)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (20 samples, 0.80%)</title><rect x="57.6000%" y="341" width="0.8000%" height="15" fill="rgb(219,56,2)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (20 samples, 0.80%)</title><rect x="57.6000%" y="325" width="0.8000%" height="15" fill="rgb(233,0,4)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="335.50"></text></g><g><title>alloc::alloc::realloc (20 samples, 0.80%)</title><rect x="57.6000%" y="309" width="0.8000%" height="15" fill="rgb(235,30,7)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="319.50"></text></g><g><title>realloc (20 samples, 0.80%)</title><rect x="57.6000%" y="293" width="0.8000%" height="15" fill="rgb(250,79,13)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="303.50"></text></g><g><title>[libc.so.6] (20 samples, 0.80%)</title><rect x="57.6000%" y="277" width="0.8000%" height="15" fill="rgb(211,146,34)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="287.50"></text></g><g><title>[libc.so.6] (20 samples, 0.80%)</title><rect x="57.6000%" y="261" width="0.8000%" height="15" fill="rgb(228,22,38)" fg:x="1440" fg:w="20"/><text x="57.8500%" y="271.50"></text></g><g><title>move_core_types::identifier::Identifier::new (20 samples, 0.80%)</title><rect x="58.4000%" y="597" width="0.8000%" height="15" fill="rgb(235,168,5)" fg:x="1460" fg:w="20"/><text x="58.6500%" y="607.50"></text></g><g><title>move_core_types::identifier::Identifier::is_valid (20 samples, 0.80%)</title><rect x="58.4000%" y="581" width="0.8000%" height="15" fill="rgb(221,155,16)" fg:x="1460" fg:w="20"/><text x="58.6500%" y="591.50"></text></g><g><title>move_core_types::identifier::is_valid (20 samples, 0.80%)</title><rect x="58.4000%" y="565" width="0.8000%" height="15" fill="rgb(215,215,53)" fg:x="1460" fg:w="20"/><text x="58.6500%" y="575.50"></text></g><g><title>move_core_types::identifier::all_bytes_valid (20 samples, 0.80%)</title><rect x="58.4000%" y="549" width="0.8000%" height="15" fill="rgb(223,4,10)" fg:x="1460" fg:w="20"/><text x="58.6500%" y="559.50"></text></g><g><title>move_core_types::identifier::is_valid_identifier_char (20 samples, 0.80%)</title><rect x="58.4000%" y="533" width="0.8000%" height="15" fill="rgb(234,103,6)" fg:x="1460" fg:w="20"/><text x="58.6500%" y="543.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (40 samples, 1.60%)</title><rect x="59.2000%" y="565" width="1.6000%" height="15" fill="rgb(227,97,0)" fg:x="1480" fg:w="40"/><text x="59.4500%" y="575.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (40 samples, 1.60%)</title><rect x="59.2000%" y="549" width="1.6000%" height="15" fill="rgb(234,150,53)" fg:x="1480" fg:w="40"/><text x="59.4500%" y="559.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (40 samples, 1.60%)</title><rect x="59.2000%" y="533" width="1.6000%" height="15" fill="rgb(228,201,54)" fg:x="1480" fg:w="40"/><text x="59.4500%" y="543.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (40 samples, 1.60%)</title><rect x="59.2000%" y="517" width="1.6000%" height="15" fill="rgb(222,22,37)" fg:x="1480" fg:w="40"/><text x="59.4500%" y="527.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (40 samples, 1.60%)</title><rect x="59.2000%" y="501" width="1.6000%" height="15" fill="rgb(237,53,32)" fg:x="1480" fg:w="40"/><text x="59.4500%" y="511.50"></text></g><g><title>once_cell::imp::initialize_or_wait (40 samples, 1.60%)</title><rect x="59.2000%" y="485" width="1.6000%" height="15" fill="rgb(233,25,53)" fg:x="1480" fg:w="40"/><text x="59.4500%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (40 samples, 1.60%)</title><rect x="59.2000%" y="469" width="1.6000%" height="15" fill="rgb(210,40,34)" fg:x="1480" fg:w="40"/><text x="59.4500%" y="479.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (40 samples, 1.60%)</title><rect x="59.2000%" y="453" width="1.6000%" height="15" fill="rgb(241,220,44)" fg:x="1480" fg:w="40"/><text x="59.4500%" y="463.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::_{{closure}} (40 samples, 1.60%)</title><rect x="59.2000%" y="437" width="1.6000%" height="15" fill="rgb(235,28,35)" fg:x="1480" fg:w="40"/><text x="59.4500%" y="447.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::_{{closure}} (40 samples, 1.60%)</title><rect x="59.2000%" y="421" width="1.6000%" height="15" fill="rgb(210,56,17)" fg:x="1480" fg:w="40"/><text x="59.4500%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once (40 samples, 1.60%)</title><rect x="59.2000%" y="405" width="1.6000%" height="15" fill="rgb(224,130,29)" fg:x="1480" fg:w="40"/><text x="59.4500%" y="415.50"></text></g><g><title>core::ops::function::FnOnce::call_once (40 samples, 1.60%)</title><rect x="59.2000%" y="389" width="1.6000%" height="15" fill="rgb(235,212,8)" fg:x="1480" fg:w="40"/><text x="59.4500%" y="399.50"></text></g><g><title>move_vm_metrics::VM_TIMER::_{{closure}} (40 samples, 1.60%)</title><rect x="59.2000%" y="373" width="1.6000%" height="15" fill="rgb(223,33,50)" fg:x="1480" fg:w="40"/><text x="59.4500%" y="383.50"></text></g><g><title>prometheus::histogram::&lt;impl prometheus::vec::MetricVec&lt;prometheus::histogram::HistogramVecBuilder&gt;&gt;::new (40 samples, 1.60%)</title><rect x="59.2000%" y="357" width="1.6000%" height="15" fill="rgb(219,149,13)" fg:x="1480" fg:w="40"/><text x="59.4500%" y="367.50"></text></g><g><title>prometheus::vec::MetricVec&lt;T&gt;::create (20 samples, 0.80%)</title><rect x="60.0000%" y="341" width="0.8000%" height="15" fill="rgb(250,156,29)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="351.50"></text></g><g><title>&lt;prometheus::histogram::HistogramOpts as prometheus::desc::Describer&gt;::describe (20 samples, 0.80%)</title><rect x="60.0000%" y="325" width="0.8000%" height="15" fill="rgb(216,193,19)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="335.50"></text></g><g><title>&lt;prometheus::metrics::Opts as prometheus::desc::Describer&gt;::describe (20 samples, 0.80%)</title><rect x="60.0000%" y="309" width="0.8000%" height="15" fill="rgb(216,135,14)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="319.50"></text></g><g><title>prometheus::desc::Desc::new (20 samples, 0.80%)</title><rect x="60.0000%" y="293" width="0.8000%" height="15" fill="rgb(241,47,5)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::set::BTreeSet&lt;alloc::string::String&gt;&gt; (20 samples, 0.80%)</title><rect x="60.0000%" y="277" width="0.8000%" height="15" fill="rgb(233,42,35)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,alloc::collections::btree::set_val::SetValZST&gt;&gt; (20 samples, 0.80%)</title><rect x="60.0000%" y="261" width="0.8000%" height="15" fill="rgb(231,13,6)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.80%)</title><rect x="60.0000%" y="245" width="0.8000%" height="15" fill="rgb(207,181,40)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="255.50"></text></g><g><title>core::mem::drop (20 samples, 0.80%)</title><rect x="60.0000%" y="229" width="0.8000%" height="15" fill="rgb(254,173,49)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,alloc::collections::btree::set_val::SetValZST&gt;&gt; (20 samples, 0.80%)</title><rect x="60.0000%" y="213" width="0.8000%" height="15" fill="rgb(221,1,38)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.80%)</title><rect x="60.0000%" y="197" width="0.8000%" height="15" fill="rgb(206,124,46)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (20 samples, 0.80%)</title><rect x="60.0000%" y="181" width="0.8000%" height="15" fill="rgb(249,21,11)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="191.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (20 samples, 0.80%)</title><rect x="60.0000%" y="165" width="0.8000%" height="15" fill="rgb(222,201,40)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (20 samples, 0.80%)</title><rect x="60.0000%" y="149" width="0.8000%" height="15" fill="rgb(235,61,29)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (20 samples, 0.80%)</title><rect x="60.0000%" y="133" width="0.8000%" height="15" fill="rgb(219,207,3)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (20 samples, 0.80%)</title><rect x="60.0000%" y="117" width="0.8000%" height="15" fill="rgb(222,56,46)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.80%)</title><rect x="60.0000%" y="101" width="0.8000%" height="15" fill="rgb(239,76,54)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (20 samples, 0.80%)</title><rect x="60.0000%" y="85" width="0.8000%" height="15" fill="rgb(231,124,27)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.80%)</title><rect x="60.0000%" y="69" width="0.8000%" height="15" fill="rgb(249,195,6)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="79.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.80%)</title><rect x="60.0000%" y="53" width="0.8000%" height="15" fill="rgb(237,174,47)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="63.50"></text></g><g><title>cfree (20 samples, 0.80%)</title><rect x="60.0000%" y="37" width="0.8000%" height="15" fill="rgb(206,201,31)" fg:x="1500" fg:w="20"/><text x="60.2500%" y="47.50"></text></g><g><title>&lt;prometheus::vec::MetricVec&lt;prometheus::histogram::HistogramVecBuilder&gt; as move_vm_metrics::Timer&gt;::timer_with_label (20 samples, 0.80%)</title><rect x="60.8000%" y="565" width="0.8000%" height="15" fill="rgb(231,57,52)" fg:x="1520" fg:w="20"/><text x="61.0500%" y="575.50"></text></g><g><title>prometheus::vec::MetricVec&lt;T&gt;::with_label_values (20 samples, 0.80%)</title><rect x="60.8000%" y="549" width="0.8000%" height="15" fill="rgb(248,177,22)" fg:x="1520" fg:w="20"/><text x="61.0500%" y="559.50"></text></g><g><title>prometheus::vec::MetricVec&lt;T&gt;::get_metric_with_label_values (20 samples, 0.80%)</title><rect x="60.8000%" y="533" width="0.8000%" height="15" fill="rgb(215,211,37)" fg:x="1520" fg:w="20"/><text x="61.0500%" y="543.50"></text></g><g><title>prometheus::vec::MetricVecCore&lt;T&gt;::get_metric_with_label_values (20 samples, 0.80%)</title><rect x="60.8000%" y="517" width="0.8000%" height="15" fill="rgb(241,128,51)" fg:x="1520" fg:w="20"/><text x="61.0500%" y="527.50"></text></g><g><title>prometheus::vec::MetricVecCore&lt;T&gt;::get_or_create_metric (20 samples, 0.80%)</title><rect x="60.8000%" y="501" width="0.8000%" height="15" fill="rgb(227,165,31)" fg:x="1520" fg:w="20"/><text x="61.0500%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (20 samples, 0.80%)</title><rect x="60.8000%" y="485" width="0.8000%" height="15" fill="rgb(228,167,24)" fg:x="1520" fg:w="20"/><text x="61.0500%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (20 samples, 0.80%)</title><rect x="60.8000%" y="469" width="0.8000%" height="15" fill="rgb(228,143,12)" fg:x="1520" fg:w="20"/><text x="61.0500%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (20 samples, 0.80%)</title><rect x="60.8000%" y="453" width="0.8000%" height="15" fill="rgb(249,149,8)" fg:x="1520" fg:w="20"/><text x="61.0500%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (20 samples, 0.80%)</title><rect x="60.8000%" y="437" width="0.8000%" height="15" fill="rgb(243,35,44)" fg:x="1520" fg:w="20"/><text x="61.0500%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (20 samples, 0.80%)</title><rect x="60.8000%" y="421" width="0.8000%" height="15" fill="rgb(246,89,9)" fg:x="1520" fg:w="20"/><text x="61.0500%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (20 samples, 0.80%)</title><rect x="60.8000%" y="405" width="0.8000%" height="15" fill="rgb(233,213,13)" fg:x="1520" fg:w="20"/><text x="61.0500%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (20 samples, 0.80%)</title><rect x="60.8000%" y="389" width="0.8000%" height="15" fill="rgb(233,141,41)" fg:x="1520" fg:w="20"/><text x="61.0500%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (20 samples, 0.80%)</title><rect x="61.6000%" y="549" width="0.8000%" height="15" fill="rgb(239,167,4)" fg:x="1540" fg:w="20"/><text x="61.8500%" y="559.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::put (20 samples, 0.80%)</title><rect x="62.4000%" y="485" width="0.8000%" height="15" fill="rgb(209,217,16)" fg:x="1560" fg:w="20"/><text x="62.6500%" y="495.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::capturing_put (20 samples, 0.80%)</title><rect x="62.4000%" y="469" width="0.8000%" height="15" fill="rgb(219,88,35)" fg:x="1560" fg:w="20"/><text x="62.6500%" y="479.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::attach (20 samples, 0.80%)</title><rect x="62.4000%" y="453" width="0.8000%" height="15" fill="rgb(220,193,23)" fg:x="1560" fg:w="20"/><text x="62.6500%" y="463.50"></text></g><g><title>move_bytecode_verifier::check_duplication::DuplicationChecker::verify_module (20 samples, 0.80%)</title><rect x="63.2000%" y="405" width="0.8000%" height="15" fill="rgb(230,90,52)" fg:x="1580" fg:w="20"/><text x="63.4500%" y="415.50"></text></g><g><title>move_bytecode_verifier::check_duplication::DuplicationChecker::verify_module_impl (20 samples, 0.80%)</title><rect x="63.2000%" y="389" width="0.8000%" height="15" fill="rgb(252,106,19)" fg:x="1580" fg:w="20"/><text x="63.4500%" y="399.50"></text></g><g><title>move_bytecode_verifier::check_duplication::DuplicationChecker::check_identifiers (20 samples, 0.80%)</title><rect x="63.2000%" y="373" width="0.8000%" height="15" fill="rgb(206,74,20)" fg:x="1580" fg:w="20"/><text x="63.4500%" y="383.50"></text></g><g><title>move_bytecode_verifier::check_duplication::DuplicationChecker::first_duplicate_element (20 samples, 0.80%)</title><rect x="63.2000%" y="357" width="0.8000%" height="15" fill="rgb(230,138,44)" fg:x="1580" fg:w="20"/><text x="63.4500%" y="367.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T&gt;::new (20 samples, 0.80%)</title><rect x="63.2000%" y="341" width="0.8000%" height="15" fill="rgb(235,182,43)" fg:x="1580" fg:w="20"/><text x="63.4500%" y="351.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (20 samples, 0.80%)</title><rect x="63.2000%" y="325" width="0.8000%" height="15" fill="rgb(242,16,51)" fg:x="1580" fg:w="20"/><text x="63.4500%" y="335.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (20 samples, 0.80%)</title><rect x="63.2000%" y="309" width="0.8000%" height="15" fill="rgb(248,9,4)" fg:x="1580" fg:w="20"/><text x="63.4500%" y="319.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (20 samples, 0.80%)</title><rect x="63.2000%" y="293" width="0.8000%" height="15" fill="rgb(210,31,22)" fg:x="1580" fg:w="20"/><text x="63.4500%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (20 samples, 0.80%)</title><rect x="63.2000%" y="277" width="0.8000%" height="15" fill="rgb(239,54,39)" fg:x="1580" fg:w="20"/><text x="63.4500%" y="287.50"></text></g><g><title>std::hash::random::RandomState::new (20 samples, 0.80%)</title><rect x="63.2000%" y="261" width="0.8000%" height="15" fill="rgb(230,99,41)" fg:x="1580" fg:w="20"/><text x="63.4500%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20 samples, 0.80%)</title><rect x="63.2000%" y="245" width="0.8000%" height="15" fill="rgb(253,106,12)" fg:x="1580" fg:w="20"/><text x="63.4500%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20 samples, 0.80%)</title><rect x="63.2000%" y="229" width="0.8000%" height="15" fill="rgb(213,46,41)" fg:x="1580" fg:w="20"/><text x="63.4500%" y="239.50"></text></g><g><title>core::ops::function::FnOnce::call_once (20 samples, 0.80%)</title><rect x="63.2000%" y="213" width="0.8000%" height="15" fill="rgb(215,133,35)" fg:x="1580" fg:w="20"/><text x="63.4500%" y="223.50"></text></g><g><title>move_bytecode_verifier::locals_safety::verify (20 samples, 0.80%)</title><rect x="64.0000%" y="341" width="0.8000%" height="15" fill="rgb(213,28,5)" fg:x="1600" fg:w="20"/><text x="64.2500%" y="351.50"></text></g><g><title>move_bytecode_verifier::locals_safety::abstract_state::AbstractState::new (20 samples, 0.80%)</title><rect x="64.0000%" y="325" width="0.8000%" height="15" fill="rgb(215,77,49)" fg:x="1600" fg:w="20"/><text x="64.2500%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (20 samples, 0.80%)</title><rect x="64.0000%" y="309" width="0.8000%" height="15" fill="rgb(248,100,22)" fg:x="1600" fg:w="20"/><text x="64.2500%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (20 samples, 0.80%)</title><rect x="64.0000%" y="293" width="0.8000%" height="15" fill="rgb(208,67,9)" fg:x="1600" fg:w="20"/><text x="64.2500%" y="303.50"></text></g><g><title>core::iter::adapters::try_process (20 samples, 0.80%)</title><rect x="64.0000%" y="277" width="0.8000%" height="15" fill="rgb(219,133,21)" fg:x="1600" fg:w="20"/><text x="64.2500%" y="287.50"></text></g><g><title>move_bytecode_verifier::reference_safety::abstract_state::AbstractState::construct_canonical_state (20 samples, 0.80%)</title><rect x="64.8000%" y="277" width="0.8000%" height="15" fill="rgb(246,46,29)" fg:x="1620" fg:w="20"/><text x="65.0500%" y="287.50"></text></g><g><title>move_borrow_graph::graph::BorrowGraph&lt;Loc,Lbl&gt;::remap_refs (20 samples, 0.80%)</title><rect x="64.8000%" y="261" width="0.8000%" height="15" fill="rgb(246,185,52)" fg:x="1620" fg:w="20"/><text x="65.0500%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (20 samples, 0.80%)</title><rect x="64.8000%" y="245" width="0.8000%" height="15" fill="rgb(252,136,11)" fg:x="1620" fg:w="20"/><text x="65.0500%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (20 samples, 0.80%)</title><rect x="64.8000%" y="229" width="0.8000%" height="15" fill="rgb(219,138,53)" fg:x="1620" fg:w="20"/><text x="65.0500%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::bulk_build_from_sorted_iter (20 samples, 0.80%)</title><rect x="64.8000%" y="213" width="0.8000%" height="15" fill="rgb(211,51,23)" fg:x="1620" fg:w="20"/><text x="65.0500%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (20 samples, 0.80%)</title><rect x="64.8000%" y="197" width="0.8000%" height="15" fill="rgb(247,221,28)" fg:x="1620" fg:w="20"/><text x="65.0500%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (20 samples, 0.80%)</title><rect x="64.8000%" y="181" width="0.8000%" height="15" fill="rgb(251,222,45)" fg:x="1620" fg:w="20"/><text x="65.0500%" y="191.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (20 samples, 0.80%)</title><rect x="64.8000%" y="165" width="0.8000%" height="15" fill="rgb(217,162,53)" fg:x="1620" fg:w="20"/><text x="65.0500%" y="175.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (20 samples, 0.80%)</title><rect x="64.8000%" y="149" width="0.8000%" height="15" fill="rgb(229,93,14)" fg:x="1620" fg:w="20"/><text x="65.0500%" y="159.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (20 samples, 0.80%)</title><rect x="64.8000%" y="133" width="0.8000%" height="15" fill="rgb(209,67,49)" fg:x="1620" fg:w="20"/><text x="65.0500%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.80%)</title><rect x="64.8000%" y="117" width="0.8000%" height="15" fill="rgb(213,87,29)" fg:x="1620" fg:w="20"/><text x="65.0500%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.80%)</title><rect x="64.8000%" y="101" width="0.8000%" height="15" fill="rgb(205,151,52)" fg:x="1620" fg:w="20"/><text x="65.0500%" y="111.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.80%)</title><rect x="64.8000%" y="85" width="0.8000%" height="15" fill="rgb(253,215,39)" fg:x="1620" fg:w="20"/><text x="65.0500%" y="95.50"></text></g><g><title>malloc (20 samples, 0.80%)</title><rect x="64.8000%" y="69" width="0.8000%" height="15" fill="rgb(221,220,41)" fg:x="1620" fg:w="20"/><text x="65.0500%" y="79.50"></text></g><g><title>move_bytecode_verifier::reference_safety::verify (40 samples, 1.60%)</title><rect x="64.8000%" y="341" width="1.6000%" height="15" fill="rgb(218,133,21)" fg:x="1620" fg:w="40"/><text x="65.0500%" y="351.50"></text></g><g><title>move_bytecode_verifier::absint::AbstractInterpreter::analyze_function (40 samples, 1.60%)</title><rect x="64.8000%" y="325" width="1.6000%" height="15" fill="rgb(221,193,43)" fg:x="1620" fg:w="40"/><text x="65.0500%" y="335.50"></text></g><g><title>move_bytecode_verifier::absint::AbstractInterpreter::execute_block (40 samples, 1.60%)</title><rect x="64.8000%" y="309" width="1.6000%" height="15" fill="rgb(240,128,52)" fg:x="1620" fg:w="40"/><text x="65.0500%" y="319.50"></text></g><g><title>&lt;move_bytecode_verifier::reference_safety::ReferenceSafetyAnalysis as move_bytecode_verifier::absint::TransferFunctions&gt;::execute (40 samples, 1.60%)</title><rect x="64.8000%" y="293" width="1.6000%" height="15" fill="rgb(253,114,12)" fg:x="1620" fg:w="40"/><text x="65.0500%" y="303.50"></text></g><g><title>move_bytecode_verifier::reference_safety::execute_inner (20 samples, 0.80%)</title><rect x="65.6000%" y="277" width="0.8000%" height="15" fill="rgb(215,223,47)" fg:x="1640" fg:w="20"/><text x="65.8500%" y="287.50"></text></g><g><title>move_bytecode_verifier::stack_usage_verifier::StackUsageVerifier::verify (20 samples, 0.80%)</title><rect x="66.4000%" y="341" width="0.8000%" height="15" fill="rgb(248,225,23)" fg:x="1660" fg:w="20"/><text x="66.6500%" y="351.50"></text></g><g><title>move_bytecode_verifier::stack_usage_verifier::StackUsageVerifier::verify_block (20 samples, 0.80%)</title><rect x="66.4000%" y="325" width="0.8000%" height="15" fill="rgb(250,108,0)" fg:x="1660" fg:w="20"/><text x="66.6500%" y="335.50"></text></g><g><title>&lt;move_binary_format::control_flow_graph::VMControlFlowGraph as move_binary_format::control_flow_graph::ControlFlowGraph&gt;::block_end (20 samples, 0.80%)</title><rect x="66.4000%" y="309" width="0.8000%" height="15" fill="rgb(228,208,7)" fg:x="1660" fg:w="20"/><text x="66.6500%" y="319.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (20 samples, 0.80%)</title><rect x="66.4000%" y="293" width="0.8000%" height="15" fill="rgb(244,45,10)" fg:x="1660" fg:w="20"/><text x="66.6500%" y="303.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get (20 samples, 0.80%)</title><rect x="66.4000%" y="277" width="0.8000%" height="15" fill="rgb(207,125,25)" fg:x="1660" fg:w="20"/><text x="66.6500%" y="287.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (20 samples, 0.80%)</title><rect x="66.4000%" y="261" width="0.8000%" height="15" fill="rgb(210,195,18)" fg:x="1660" fg:w="20"/><text x="66.6500%" y="271.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (20 samples, 0.80%)</title><rect x="66.4000%" y="245" width="0.8000%" height="15" fill="rgb(249,80,12)" fg:x="1660" fg:w="20"/><text x="66.6500%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (20 samples, 0.80%)</title><rect x="66.4000%" y="229" width="0.8000%" height="15" fill="rgb(221,65,9)" fg:x="1660" fg:w="20"/><text x="66.6500%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (20 samples, 0.80%)</title><rect x="66.4000%" y="213" width="0.8000%" height="15" fill="rgb(235,49,36)" fg:x="1660" fg:w="20"/><text x="66.6500%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (20 samples, 0.80%)</title><rect x="66.4000%" y="197" width="0.8000%" height="15" fill="rgb(225,32,20)" fg:x="1660" fg:w="20"/><text x="66.6500%" y="207.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (20 samples, 0.80%)</title><rect x="66.4000%" y="181" width="0.8000%" height="15" fill="rgb(215,141,46)" fg:x="1660" fg:w="20"/><text x="66.6500%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (20 samples, 0.80%)</title><rect x="66.4000%" y="165" width="0.8000%" height="15" fill="rgb(250,160,47)" fg:x="1660" fg:w="20"/><text x="66.6500%" y="175.50"></text></g><g><title>move_bytecode_verifier::code_unit_verifier::CodeUnitVerifier::verify_common (120 samples, 4.80%)</title><rect x="64.0000%" y="357" width="4.8000%" height="15" fill="rgb(216,222,40)" fg:x="1600" fg:w="120"/><text x="64.2500%" y="367.50">move_b..</text></g><g><title>move_bytecode_verifier::type_safety::verify (40 samples, 1.60%)</title><rect x="67.2000%" y="341" width="1.6000%" height="15" fill="rgb(234,217,39)" fg:x="1680" fg:w="40"/><text x="67.4500%" y="351.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;I,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.80%)</title><rect x="68.0000%" y="325" width="0.8000%" height="15" fill="rgb(207,178,40)" fg:x="1700" fg:w="20"/><text x="68.2500%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (20 samples, 0.80%)</title><rect x="68.0000%" y="309" width="0.8000%" height="15" fill="rgb(221,136,13)" fg:x="1700" fg:w="20"/><text x="68.2500%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next (20 samples, 0.80%)</title><rect x="68.0000%" y="293" width="0.8000%" height="15" fill="rgb(249,199,10)" fg:x="1700" fg:w="20"/><text x="68.2500%" y="303.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (20 samples, 0.80%)</title><rect x="68.0000%" y="277" width="0.8000%" height="15" fill="rgb(249,222,13)" fg:x="1700" fg:w="20"/><text x="68.2500%" y="287.50"></text></g><g><title>move_binary_format::binary_views::FunctionView::function (20 samples, 0.80%)</title><rect x="68.8000%" y="341" width="0.8000%" height="15" fill="rgb(244,185,38)" fg:x="1720" fg:w="20"/><text x="69.0500%" y="351.50"></text></g><g><title>move_binary_format::control_flow_graph::VMControlFlowGraph::new (20 samples, 0.80%)</title><rect x="68.8000%" y="325" width="0.8000%" height="15" fill="rgb(236,202,9)" fg:x="1720" fg:w="20"/><text x="69.0500%" y="335.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (20 samples, 0.80%)</title><rect x="68.8000%" y="309" width="0.8000%" height="15" fill="rgb(250,229,37)" fg:x="1720" fg:w="20"/><text x="69.0500%" y="319.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (20 samples, 0.80%)</title><rect x="68.8000%" y="293" width="0.8000%" height="15" fill="rgb(206,174,23)" fg:x="1720" fg:w="20"/><text x="69.0500%" y="303.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (20 samples, 0.80%)</title><rect x="68.8000%" y="277" width="0.8000%" height="15" fill="rgb(211,33,43)" fg:x="1720" fg:w="20"/><text x="69.0500%" y="287.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push (20 samples, 0.80%)</title><rect x="68.8000%" y="261" width="0.8000%" height="15" fill="rgb(245,58,50)" fg:x="1720" fg:w="20"/><text x="69.0500%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (20 samples, 0.80%)</title><rect x="68.8000%" y="245" width="0.8000%" height="15" fill="rgb(244,68,36)" fg:x="1720" fg:w="20"/><text x="69.0500%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (20 samples, 0.80%)</title><rect x="68.8000%" y="229" width="0.8000%" height="15" fill="rgb(232,229,15)" fg:x="1720" fg:w="20"/><text x="69.0500%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (20 samples, 0.80%)</title><rect x="68.8000%" y="213" width="0.8000%" height="15" fill="rgb(254,30,23)" fg:x="1720" fg:w="20"/><text x="69.0500%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (20 samples, 0.80%)</title><rect x="68.8000%" y="197" width="0.8000%" height="15" fill="rgb(235,160,14)" fg:x="1720" fg:w="20"/><text x="69.0500%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (20 samples, 0.80%)</title><rect x="68.8000%" y="181" width="0.8000%" height="15" fill="rgb(212,155,44)" fg:x="1720" fg:w="20"/><text x="69.0500%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (20 samples, 0.80%)</title><rect x="68.8000%" y="165" width="0.8000%" height="15" fill="rgb(226,2,50)" fg:x="1720" fg:w="20"/><text x="69.0500%" y="175.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (20 samples, 0.80%)</title><rect x="68.8000%" y="149" width="0.8000%" height="15" fill="rgb(234,177,6)" fg:x="1720" fg:w="20"/><text x="69.0500%" y="159.50"></text></g><g><title>move_bytecode_verifier::code_unit_verifier::CodeUnitVerifier::verify_module (160 samples, 6.40%)</title><rect x="64.0000%" y="405" width="6.4000%" height="15" fill="rgb(217,24,9)" fg:x="1600" fg:w="160"/><text x="64.2500%" y="415.50">move_byt..</text></g><g><title>move_bytecode_verifier::code_unit_verifier::CodeUnitVerifier::verify_module_impl (160 samples, 6.40%)</title><rect x="64.0000%" y="389" width="6.4000%" height="15" fill="rgb(220,13,46)" fg:x="1600" fg:w="160"/><text x="64.2500%" y="399.50">move_byt..</text></g><g><title>move_bytecode_verifier::code_unit_verifier::CodeUnitVerifier::verify_function (160 samples, 6.40%)</title><rect x="64.0000%" y="373" width="6.4000%" height="15" fill="rgb(239,221,27)" fg:x="1600" fg:w="160"/><text x="64.2500%" y="383.50">move_byt..</text></g><g><title>move_bytecode_verifier::control_flow::verify_function (40 samples, 1.60%)</title><rect x="68.8000%" y="357" width="1.6000%" height="15" fill="rgb(222,198,25)" fg:x="1720" fg:w="40"/><text x="69.0500%" y="367.50"></text></g><g><title>move_bytecode_verifier::control_flow::verify_reducibility (20 samples, 0.80%)</title><rect x="69.6000%" y="341" width="0.8000%" height="15" fill="rgb(211,99,13)" fg:x="1740" fg:w="20"/><text x="69.8500%" y="351.50"></text></g><g><title>move_bytecode_verifier::loop_summary::LoopSummary::new (20 samples, 0.80%)</title><rect x="69.6000%" y="325" width="0.8000%" height="15" fill="rgb(232,111,31)" fg:x="1740" fg:w="20"/><text x="69.8500%" y="335.50"></text></g><g><title>move_bytecode_verifier::features::FeatureVerifier::verify_module (40 samples, 1.60%)</title><rect x="70.4000%" y="405" width="1.6000%" height="15" fill="rgb(245,82,37)" fg:x="1760" fg:w="40"/><text x="70.6500%" y="415.50"></text></g><g><title>move_bytecode_verifier::verifier::verify_module_with_config (240 samples, 9.60%)</title><rect x="63.2000%" y="485" width="9.6000%" height="15" fill="rgb(227,149,46)" fg:x="1580" fg:w="240"/><text x="63.4500%" y="495.50">move_bytecode_..</text></g><g><title>std::panic::catch_unwind (240 samples, 9.60%)</title><rect x="63.2000%" y="469" width="9.6000%" height="15" fill="rgb(218,36,50)" fg:x="1580" fg:w="240"/><text x="63.4500%" y="479.50">std::panic::ca..</text></g><g><title>std::panicking::try (240 samples, 9.60%)</title><rect x="63.2000%" y="453" width="9.6000%" height="15" fill="rgb(226,80,48)" fg:x="1580" fg:w="240"/><text x="63.4500%" y="463.50">std::panicking..</text></g><g><title>std::panicking::try::do_call (240 samples, 9.60%)</title><rect x="63.2000%" y="437" width="9.6000%" height="15" fill="rgb(238,224,15)" fg:x="1580" fg:w="240"/><text x="63.4500%" y="447.50">std::panicking..</text></g><g><title>move_bytecode_verifier::verifier::verify_module_with_config::_{{closure}} (240 samples, 9.60%)</title><rect x="63.2000%" y="421" width="9.6000%" height="15" fill="rgb(241,136,10)" fg:x="1580" fg:w="240"/><text x="63.4500%" y="431.50">move_bytecode_..</text></g><g><title>move_bytecode_verifier::struct_defs::RecursiveStructDefChecker::verify_module (20 samples, 0.80%)</title><rect x="72.0000%" y="405" width="0.8000%" height="15" fill="rgb(208,32,45)" fg:x="1800" fg:w="20"/><text x="72.2500%" y="415.50"></text></g><g><title>move_bytecode_verifier::struct_defs::RecursiveStructDefChecker::verify_module_impl (20 samples, 0.80%)</title><rect x="72.0000%" y="389" width="0.8000%" height="15" fill="rgb(207,135,9)" fg:x="1800" fg:w="20"/><text x="72.2500%" y="399.50"></text></g><g><title>petgraph::algo::toposort (20 samples, 0.80%)</title><rect x="72.0000%" y="373" width="0.8000%" height="15" fill="rgb(206,86,44)" fg:x="1800" fg:w="20"/><text x="72.2500%" y="383.50"></text></g><g><title>petgraph::algo::with_dfs (20 samples, 0.80%)</title><rect x="72.0000%" y="357" width="0.8000%" height="15" fill="rgb(245,177,15)" fg:x="1800" fg:w="20"/><text x="72.2500%" y="367.50"></text></g><g><title>move_vm_runtime::loader::LoaderV1::load_and_verify_module (280 samples, 11.20%)</title><rect x="62.4000%" y="501" width="11.2000%" height="15" fill="rgb(206,64,50)" fg:x="1560" fg:w="280"/><text x="62.6500%" y="511.50">move_vm_runtime:..</text></g><g><title>move_vm_runtime::data_cache::TransactionDataCache::load_compiled_module_to_cache (20 samples, 0.80%)</title><rect x="72.8000%" y="485" width="0.8000%" height="15" fill="rgb(234,36,40)" fg:x="1820" fg:w="20"/><text x="73.0500%" y="495.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::update (20 samples, 0.80%)</title><rect x="72.8000%" y="469" width="0.8000%" height="15" fill="rgb(213,64,8)" fg:x="1820" fg:w="20"/><text x="73.0500%" y="479.50"></text></g><g><title>&lt;sha3::Sha3_256 as digest::Update&gt;::update (20 samples, 0.80%)</title><rect x="72.8000%" y="453" width="0.8000%" height="15" fill="rgb(210,75,36)" fg:x="1820" fg:w="20"/><text x="73.0500%" y="463.50"></text></g><g><title>sha3::Keccak256Full::absorb (20 samples, 0.80%)</title><rect x="72.8000%" y="437" width="0.8000%" height="15" fill="rgb(229,88,21)" fg:x="1820" fg:w="20"/><text x="73.0500%" y="447.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::input_block (20 samples, 0.80%)</title><rect x="72.8000%" y="421" width="0.8000%" height="15" fill="rgb(252,204,47)" fg:x="1820" fg:w="20"/><text x="73.0500%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (20 samples, 0.80%)</title><rect x="72.8000%" y="405" width="0.8000%" height="15" fill="rgb(208,77,27)" fg:x="1820" fg:w="20"/><text x="73.0500%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.80%)</title><rect x="72.8000%" y="389" width="0.8000%" height="15" fill="rgb(221,76,26)" fg:x="1820" fg:w="20"/><text x="73.0500%" y="399.50"></text></g><g><title>[libc.so.6] (20 samples, 0.80%)</title><rect x="72.8000%" y="373" width="0.8000%" height="15" fill="rgb(225,139,18)" fg:x="1820" fg:w="20"/><text x="73.0500%" y="383.50"></text></g><g><title>move_vm_runtime::loader::Loader::load_function (380 samples, 15.20%)</title><rect x="59.2000%" y="581" width="15.2000%" height="15" fill="rgb(230,137,11)" fg:x="1480" fg:w="380"/><text x="59.4500%" y="591.50">move_vm_runtime::loader..</text></g><g><title>move_vm_runtime::loader::Loader::load_function_without_type_args (320 samples, 12.80%)</title><rect x="61.6000%" y="565" width="12.8000%" height="15" fill="rgb(212,28,1)" fg:x="1540" fg:w="320"/><text x="61.8500%" y="575.50">move_vm_runtime::lo..</text></g><g><title>move_vm_runtime::loader::LoaderV1::load_module (300 samples, 12.00%)</title><rect x="62.4000%" y="549" width="12.0000%" height="15" fill="rgb(248,164,17)" fg:x="1560" fg:w="300"/><text x="62.6500%" y="559.50">move_vm_runtime::l..</text></g><g><title>move_vm_runtime::loader::LoaderV1::load_and_verify_module_and_dependencies_and_friends (300 samples, 12.00%)</title><rect x="62.4000%" y="533" width="12.0000%" height="15" fill="rgb(222,171,42)" fg:x="1560" fg:w="300"/><text x="62.6500%" y="543.50">move_vm_runtime::l..</text></g><g><title>move_vm_runtime::loader::LoaderV1::load_and_verify_module_and_dependencies (300 samples, 12.00%)</title><rect x="62.4000%" y="517" width="12.0000%" height="15" fill="rgb(243,84,45)" fg:x="1560" fg:w="300"/><text x="62.6500%" y="527.50">move_vm_runtime::l..</text></g><g><title>move_vm_runtime::loader::modules::LegacyModuleStorageAdapter::insert (20 samples, 0.80%)</title><rect x="73.6000%" y="501" width="0.8000%" height="15" fill="rgb(252,49,23)" fg:x="1840" fg:w="20"/><text x="73.8500%" y="511.50"></text></g><g><title>move_vm_runtime::loader::modules::Module::new (20 samples, 0.80%)</title><rect x="73.6000%" y="485" width="0.8000%" height="15" fill="rgb(215,19,7)" fg:x="1840" fg:w="20"/><text x="73.8500%" y="495.50"></text></g><g><title>move_vm_runtime::loader::modules::Module::new::_{{closure}} (20 samples, 0.80%)</title><rect x="73.6000%" y="469" width="0.8000%" height="15" fill="rgb(238,81,41)" fg:x="1840" fg:w="20"/><text x="73.8500%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (20 samples, 0.80%)</title><rect x="73.6000%" y="453" width="0.8000%" height="15" fill="rgb(210,199,37)" fg:x="1840" fg:w="20"/><text x="73.8500%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (20 samples, 0.80%)</title><rect x="73.6000%" y="437" width="0.8000%" height="15" fill="rgb(244,192,49)" fg:x="1840" fg:w="20"/><text x="73.8500%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (20 samples, 0.80%)</title><rect x="73.6000%" y="421" width="0.8000%" height="15" fill="rgb(226,211,11)" fg:x="1840" fg:w="20"/><text x="73.8500%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.80%)</title><rect x="73.6000%" y="405" width="0.8000%" height="15" fill="rgb(236,162,54)" fg:x="1840" fg:w="20"/><text x="73.8500%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.80%)</title><rect x="73.6000%" y="389" width="0.8000%" height="15" fill="rgb(220,229,9)" fg:x="1840" fg:w="20"/><text x="73.8500%" y="399.50"></text></g><g><title>&lt;prometheus::vec::MetricVec&lt;prometheus::histogram::HistogramVecBuilder&gt; as move_vm_metrics::Timer&gt;::timer_with_label (20 samples, 0.80%)</title><rect x="74.4000%" y="549" width="0.8000%" height="15" fill="rgb(250,87,22)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="559.50"></text></g><g><title>prometheus::vec::MetricVec&lt;T&gt;::with_label_values (20 samples, 0.80%)</title><rect x="74.4000%" y="533" width="0.8000%" height="15" fill="rgb(239,43,17)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="543.50"></text></g><g><title>prometheus::vec::MetricVec&lt;T&gt;::get_metric_with_label_values (20 samples, 0.80%)</title><rect x="74.4000%" y="517" width="0.8000%" height="15" fill="rgb(231,177,25)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="527.50"></text></g><g><title>prometheus::vec::MetricVecCore&lt;T&gt;::get_metric_with_label_values (20 samples, 0.80%)</title><rect x="74.4000%" y="501" width="0.8000%" height="15" fill="rgb(219,179,1)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="511.50"></text></g><g><title>prometheus::vec::MetricVecCore&lt;T&gt;::get_or_create_metric (20 samples, 0.80%)</title><rect x="74.4000%" y="485" width="0.8000%" height="15" fill="rgb(238,219,53)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="495.50"></text></g><g><title>&lt;prometheus::histogram::HistogramVecBuilder as prometheus::vec::MetricVecBuilder&gt;::build (20 samples, 0.80%)</title><rect x="74.4000%" y="469" width="0.8000%" height="15" fill="rgb(232,167,36)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="479.50"></text></g><g><title>prometheus::histogram::Histogram::with_opts_and_label_values (20 samples, 0.80%)</title><rect x="74.4000%" y="453" width="0.8000%" height="15" fill="rgb(244,19,51)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="463.50"></text></g><g><title>prometheus::histogram::HistogramCore::new (20 samples, 0.80%)</title><rect x="74.4000%" y="437" width="0.8000%" height="15" fill="rgb(224,6,22)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (20 samples, 0.80%)</title><rect x="74.4000%" y="421" width="0.8000%" height="15" fill="rgb(224,145,5)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (20 samples, 0.80%)</title><rect x="74.4000%" y="405" width="0.8000%" height="15" fill="rgb(234,130,49)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 0.80%)</title><rect x="74.4000%" y="389" width="0.8000%" height="15" fill="rgb(254,6,2)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (20 samples, 0.80%)</title><rect x="74.4000%" y="373" width="0.8000%" height="15" fill="rgb(208,96,46)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20 samples, 0.80%)</title><rect x="74.4000%" y="357" width="0.8000%" height="15" fill="rgb(239,3,39)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.80%)</title><rect x="74.4000%" y="341" width="0.8000%" height="15" fill="rgb(233,210,1)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (20 samples, 0.80%)</title><rect x="74.4000%" y="325" width="0.8000%" height="15" fill="rgb(244,137,37)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (20 samples, 0.80%)</title><rect x="74.4000%" y="309" width="0.8000%" height="15" fill="rgb(240,136,2)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.80%)</title><rect x="74.4000%" y="293" width="0.8000%" height="15" fill="rgb(239,18,37)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.80%)</title><rect x="74.4000%" y="277" width="0.8000%" height="15" fill="rgb(218,185,22)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="287.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.80%)</title><rect x="74.4000%" y="261" width="0.8000%" height="15" fill="rgb(225,218,4)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="271.50"></text></g><g><title>malloc (20 samples, 0.80%)</title><rect x="74.4000%" y="245" width="0.8000%" height="15" fill="rgb(230,182,32)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="255.50"></text></g><g><title>[libc.so.6] (20 samples, 0.80%)</title><rect x="74.4000%" y="229" width="0.8000%" height="15" fill="rgb(242,56,43)" fg:x="1860" fg:w="20"/><text x="74.6500%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.80%)</title><rect x="75.2000%" y="517" width="0.8000%" height="15" fill="rgb(233,99,24)" fg:x="1880" fg:w="20"/><text x="75.4500%" y="527.50"></text></g><g><title>core::mem::drop (20 samples, 0.80%)</title><rect x="75.2000%" y="501" width="0.8000%" height="15" fill="rgb(234,209,42)" fg:x="1880" fg:w="20"/><text x="75.4500%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;move_binary_format::file_format::StructDefInstantiationIndex,(move_vm_types::loaded_data::runtime_types::Type,move_core_types::gas_algebra::GasQuantity&lt;move_core_types::gas_algebra::TypeNode&gt;)&gt;&gt; (20 samples, 0.80%)</title><rect x="75.2000%" y="485" width="0.8000%" height="15" fill="rgb(227,7,12)" fg:x="1880" fg:w="20"/><text x="75.4500%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.80%)</title><rect x="75.2000%" y="469" width="0.8000%" height="15" fill="rgb(245,203,43)" fg:x="1880" fg:w="20"/><text x="75.4500%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (20 samples, 0.80%)</title><rect x="75.2000%" y="453" width="0.8000%" height="15" fill="rgb(238,205,33)" fg:x="1880" fg:w="20"/><text x="75.4500%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (20 samples, 0.80%)</title><rect x="76.0000%" y="517" width="0.8000%" height="15" fill="rgb(231,56,7)" fg:x="1900" fg:w="20"/><text x="76.2500%" y="527.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (20 samples, 0.80%)</title><rect x="76.0000%" y="501" width="0.8000%" height="15" fill="rgb(244,186,29)" fg:x="1900" fg:w="20"/><text x="76.2500%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.80%)</title><rect x="76.8000%" y="485" width="0.8000%" height="15" fill="rgb(234,111,31)" fg:x="1920" fg:w="20"/><text x="77.0500%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[move_vm_types::loaded_data::runtime_types::Type]&gt; (20 samples, 0.80%)</title><rect x="76.8000%" y="469" width="0.8000%" height="15" fill="rgb(241,149,10)" fg:x="1920" fg:w="20"/><text x="77.0500%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;move_vm_types::loaded_data::runtime_types::Type&gt; (20 samples, 0.80%)</title><rect x="76.8000%" y="453" width="0.8000%" height="15" fill="rgb(249,206,44)" fg:x="1920" fg:w="20"/><text x="77.0500%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;move_vm_runtime::interpreter::Frame&gt; (60 samples, 2.40%)</title><rect x="76.8000%" y="517" width="2.4000%" height="15" fill="rgb(251,153,30)" fg:x="1920" fg:w="60"/><text x="77.0500%" y="527.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;move_vm_types::loaded_data::runtime_types::Type&gt;&gt; (60 samples, 2.40%)</title><rect x="76.8000%" y="501" width="2.4000%" height="15" fill="rgb(239,152,38)" fg:x="1920" fg:w="60"/><text x="77.0500%" y="511.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;move_vm_types::loaded_data::runtime_types::Type&gt;&gt; (40 samples, 1.60%)</title><rect x="77.6000%" y="485" width="1.6000%" height="15" fill="rgb(249,139,47)" fg:x="1940" fg:w="40"/><text x="77.8500%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 1.60%)</title><rect x="77.6000%" y="469" width="1.6000%" height="15" fill="rgb(244,64,35)" fg:x="1940" fg:w="40"/><text x="77.8500%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (40 samples, 1.60%)</title><rect x="77.6000%" y="453" width="1.6000%" height="15" fill="rgb(216,46,15)" fg:x="1940" fg:w="40"/><text x="77.8500%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (40 samples, 1.60%)</title><rect x="77.6000%" y="437" width="1.6000%" height="15" fill="rgb(250,74,19)" fg:x="1940" fg:w="40"/><text x="77.8500%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (40 samples, 1.60%)</title><rect x="77.6000%" y="421" width="1.6000%" height="15" fill="rgb(249,42,33)" fg:x="1940" fg:w="40"/><text x="77.8500%" y="431.50"></text></g><g><title>cfree (40 samples, 1.60%)</title><rect x="77.6000%" y="405" width="1.6000%" height="15" fill="rgb(242,149,17)" fg:x="1940" fg:w="40"/><text x="77.8500%" y="415.50"></text></g><g><title>[libc.so.6] (40 samples, 1.60%)</title><rect x="77.6000%" y="389" width="1.6000%" height="15" fill="rgb(244,29,21)" fg:x="1940" fg:w="40"/><text x="77.8500%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;move_binary_format::file_format::StructDefInstantiationIndex,(move_vm_types::loaded_data::runtime_types::Type,move_core_types::gas_algebra::GasQuantity&lt;move_core_types::gas_algebra::TypeNode&gt;)&gt;&gt; (40 samples, 1.60%)</title><rect x="79.2000%" y="501" width="1.6000%" height="15" fill="rgb(220,130,37)" fg:x="1980" fg:w="40"/><text x="79.4500%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 1.60%)</title><rect x="79.2000%" y="485" width="1.6000%" height="15" fill="rgb(211,67,2)" fg:x="1980" fg:w="40"/><text x="79.4500%" y="495.50"></text></g><g><title>core::mem::drop (40 samples, 1.60%)</title><rect x="79.2000%" y="469" width="1.6000%" height="15" fill="rgb(235,68,52)" fg:x="1980" fg:w="40"/><text x="79.4500%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;move_binary_format::file_format::StructDefInstantiationIndex,(move_vm_types::loaded_data::runtime_types::Type,move_core_types::gas_algebra::GasQuantity&lt;move_core_types::gas_algebra::TypeNode&gt;)&gt;&gt; (40 samples, 1.60%)</title><rect x="79.2000%" y="453" width="1.6000%" height="15" fill="rgb(246,142,3)" fg:x="1980" fg:w="40"/><text x="79.4500%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 1.60%)</title><rect x="79.2000%" y="437" width="1.6000%" height="15" fill="rgb(241,25,7)" fg:x="1980" fg:w="40"/><text x="79.4500%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (40 samples, 1.60%)</title><rect x="79.2000%" y="421" width="1.6000%" height="15" fill="rgb(242,119,39)" fg:x="1980" fg:w="40"/><text x="79.4500%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;move_binary_format::file_format::StructDefInstantiationIndex,alloc::vec::Vec&lt;(move_vm_types::loaded_data::runtime_types::Type,move_core_types::gas_algebra::GasQuantity&lt;move_core_types::gas_algebra::TypeNode&gt;)&gt;&gt;&gt; (40 samples, 1.60%)</title><rect x="80.8000%" y="501" width="1.6000%" height="15" fill="rgb(241,98,45)" fg:x="2020" fg:w="40"/><text x="81.0500%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 1.60%)</title><rect x="80.8000%" y="485" width="1.6000%" height="15" fill="rgb(254,28,30)" fg:x="2020" fg:w="40"/><text x="81.0500%" y="495.50"></text></g><g><title>core::mem::drop (40 samples, 1.60%)</title><rect x="80.8000%" y="469" width="1.6000%" height="15" fill="rgb(241,142,54)" fg:x="2020" fg:w="40"/><text x="81.0500%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;move_binary_format::file_format::StructVariantInstantiationIndex,alloc::vec::Vec&lt;(move_vm_types::loaded_data::runtime_types::Type,move_core_types::gas_algebra::GasQuantity&lt;move_core_types::gas_algebra::TypeNode&gt;)&gt;&gt;&gt; (40 samples, 1.60%)</title><rect x="80.8000%" y="453" width="1.6000%" height="15" fill="rgb(222,85,15)" fg:x="2020" fg:w="40"/><text x="81.0500%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 1.60%)</title><rect x="80.8000%" y="437" width="1.6000%" height="15" fill="rgb(210,85,47)" fg:x="2020" fg:w="40"/><text x="81.0500%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (40 samples, 1.60%)</title><rect x="80.8000%" y="421" width="1.6000%" height="15" fill="rgb(224,206,25)" fg:x="2020" fg:w="40"/><text x="81.0500%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;move_vm_runtime::interpreter::FrameTypeCache&gt; (100 samples, 4.00%)</title><rect x="79.2000%" y="517" width="4.0000%" height="15" fill="rgb(243,201,19)" fg:x="1980" fg:w="100"/><text x="79.4500%" y="527.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;move_binary_format::file_format::VariantFieldInstantiationIndex,((move_vm_types::loaded_data::runtime_types::Type,move_core_types::gas_algebra::GasQuantity&lt;move_core_types::gas_algebra::TypeNode&gt;),(move_vm_types::loaded_data::runtime_types::Type,move_core_types::gas_algebra::GasQuantity&lt;move_core_types::gas_algebra::TypeNode&gt;))&gt;&gt; (20 samples, 0.80%)</title><rect x="82.4000%" y="501" width="0.8000%" height="15" fill="rgb(236,59,4)" fg:x="2060" fg:w="20"/><text x="82.6500%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.80%)</title><rect x="82.4000%" y="485" width="0.8000%" height="15" fill="rgb(254,179,45)" fg:x="2060" fg:w="20"/><text x="82.6500%" y="495.50"></text></g><g><title>core::mem::drop (20 samples, 0.80%)</title><rect x="82.4000%" y="469" width="0.8000%" height="15" fill="rgb(226,14,10)" fg:x="2060" fg:w="20"/><text x="82.6500%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;move_binary_format::file_format::VariantFieldInstantiationIndex,((move_vm_types::loaded_data::runtime_types::Type,move_core_types::gas_algebra::GasQuantity&lt;move_core_types::gas_algebra::TypeNode&gt;),(move_vm_types::loaded_data::runtime_types::Type,move_core_types::gas_algebra::GasQuantity&lt;move_core_types::gas_algebra::TypeNode&gt;))&gt;&gt; (20 samples, 0.80%)</title><rect x="82.4000%" y="453" width="0.8000%" height="15" fill="rgb(244,27,41)" fg:x="2060" fg:w="20"/><text x="82.6500%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.80%)</title><rect x="82.4000%" y="437" width="0.8000%" height="15" fill="rgb(235,35,32)" fg:x="2060" fg:w="20"/><text x="82.6500%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (40 samples, 1.60%)</title><rect x="83.2000%" y="517" width="1.6000%" height="15" fill="rgb(218,68,31)" fg:x="2080" fg:w="40"/><text x="83.4500%" y="527.50"></text></g><g><title>move_vm_runtime::interpreter::Frame::execute_code (20 samples, 0.80%)</title><rect x="84.8000%" y="517" width="0.8000%" height="15" fill="rgb(207,120,37)" fg:x="2120" fg:w="20"/><text x="85.0500%" y="527.50"></text></g><g><title>move_vm_runtime::interpreter::Frame::execute_code_impl (20 samples, 0.80%)</title><rect x="84.8000%" y="501" width="0.8000%" height="15" fill="rgb(227,98,0)" fg:x="2120" fg:w="20"/><text x="85.0500%" y="511.50"></text></g><g><title>[libc.so.6] (20 samples, 0.80%)</title><rect x="85.6000%" y="501" width="0.8000%" height="15" fill="rgb(207,7,3)" fg:x="2140" fg:w="20"/><text x="85.8500%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (20 samples, 0.80%)</title><rect x="86.4000%" y="501" width="0.8000%" height="15" fill="rgb(206,98,19)" fg:x="2160" fg:w="20"/><text x="86.6500%" y="511.50"></text></g><g><title>core::cmp::PartialEq::ne (20 samples, 0.80%)</title><rect x="86.4000%" y="485" width="0.8000%" height="15" fill="rgb(217,5,26)" fg:x="2160" fg:w="20"/><text x="86.6500%" y="495.50"></text></g><g><title>&lt;move_core_types::language_storage::ModuleId as core::cmp::PartialEq&gt;::eq (20 samples, 0.80%)</title><rect x="86.4000%" y="469" width="0.8000%" height="15" fill="rgb(235,190,38)" fg:x="2160" fg:w="20"/><text x="86.6500%" y="479.50"></text></g><g><title>&lt;move_core_types::account_address::AccountAddress as core::cmp::PartialEq&gt;::eq (20 samples, 0.80%)</title><rect x="86.4000%" y="453" width="0.8000%" height="15" fill="rgb(247,86,24)" fg:x="2160" fg:w="20"/><text x="86.6500%" y="463.50"></text></g><g><title>core::array::equality::_&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (20 samples, 0.80%)</title><rect x="86.4000%" y="437" width="0.8000%" height="15" fill="rgb(205,101,16)" fg:x="2160" fg:w="20"/><text x="86.6500%" y="447.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (20 samples, 0.80%)</title><rect x="86.4000%" y="421" width="0.8000%" height="15" fill="rgb(246,168,33)" fg:x="2160" fg:w="20"/><text x="86.6500%" y="431.50"></text></g><g><title>core::mem::swap (20 samples, 0.80%)</title><rect x="87.2000%" y="501" width="0.8000%" height="15" fill="rgb(231,114,1)" fg:x="2180" fg:w="20"/><text x="87.4500%" y="511.50"></text></g><g><title>core::intrinsics::typed_swap (20 samples, 0.80%)</title><rect x="87.2000%" y="485" width="0.8000%" height="15" fill="rgb(207,184,53)" fg:x="2180" fg:w="20"/><text x="87.4500%" y="495.50"></text></g><g><title>core::ptr::swap_nonoverlapping (20 samples, 0.80%)</title><rect x="87.2000%" y="469" width="0.8000%" height="15" fill="rgb(224,95,51)" fg:x="2180" fg:w="20"/><text x="87.4500%" y="479.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (20 samples, 0.80%)</title><rect x="87.2000%" y="453" width="0.8000%" height="15" fill="rgb(212,188,45)" fg:x="2180" fg:w="20"/><text x="87.4500%" y="463.50"></text></g><g><title>core::ptr::write (20 samples, 0.80%)</title><rect x="87.2000%" y="437" width="0.8000%" height="15" fill="rgb(223,154,38)" fg:x="2180" fg:w="20"/><text x="87.4500%" y="447.50"></text></g><g><title>move_vm_runtime::interpreter::CallStack::push (20 samples, 0.80%)</title><rect x="88.0000%" y="501" width="0.8000%" height="15" fill="rgb(251,22,52)" fg:x="2200" fg:w="20"/><text x="88.2500%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20 samples, 0.80%)</title><rect x="88.0000%" y="485" width="0.8000%" height="15" fill="rgb(229,209,22)" fg:x="2200" fg:w="20"/><text x="88.2500%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 0.80%)</title><rect x="88.0000%" y="469" width="0.8000%" height="15" fill="rgb(234,138,34)" fg:x="2200" fg:w="20"/><text x="88.2500%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (20 samples, 0.80%)</title><rect x="88.0000%" y="453" width="0.8000%" height="15" fill="rgb(212,95,11)" fg:x="2200" fg:w="20"/><text x="88.2500%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (20 samples, 0.80%)</title><rect x="88.0000%" y="437" width="0.8000%" height="15" fill="rgb(240,179,47)" fg:x="2200" fg:w="20"/><text x="88.2500%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 0.80%)</title><rect x="88.0000%" y="421" width="0.8000%" height="15" fill="rgb(240,163,11)" fg:x="2200" fg:w="20"/><text x="88.2500%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (20 samples, 0.80%)</title><rect x="88.0000%" y="405" width="0.8000%" height="15" fill="rgb(236,37,12)" fg:x="2200" fg:w="20"/><text x="88.2500%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (20 samples, 0.80%)</title><rect x="88.0000%" y="389" width="0.8000%" height="15" fill="rgb(232,164,16)" fg:x="2200" fg:w="20"/><text x="88.2500%" y="399.50"></text></g><g><title>alloc::alloc::realloc (20 samples, 0.80%)</title><rect x="88.0000%" y="373" width="0.8000%" height="15" fill="rgb(244,205,15)" fg:x="2200" fg:w="20"/><text x="88.2500%" y="383.50"></text></g><g><title>realloc (20 samples, 0.80%)</title><rect x="88.0000%" y="357" width="0.8000%" height="15" fill="rgb(223,117,47)" fg:x="2200" fg:w="20"/><text x="88.2500%" y="367.50"></text></g><g><title>[libc.so.6] (20 samples, 0.80%)</title><rect x="88.0000%" y="341" width="0.8000%" height="15" fill="rgb(244,107,35)" fg:x="2200" fg:w="20"/><text x="88.2500%" y="351.50"></text></g><g><title>[libc.so.6] (20 samples, 0.80%)</title><rect x="88.0000%" y="325" width="0.8000%" height="15" fill="rgb(205,140,8)" fg:x="2200" fg:w="20"/><text x="88.2500%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (60 samples, 2.40%)</title><rect x="88.8000%" y="485" width="2.4000%" height="15" fill="rgb(228,84,46)" fg:x="2220" fg:w="60"/><text x="89.0500%" y="495.50">&lt;c..</text></g><g><title>core::ptr::drop_in_place&lt;move_vm_types::loaded_data::runtime_types::Type&gt; (20 samples, 0.80%)</title><rect x="91.2000%" y="485" width="0.8000%" height="15" fill="rgb(254,188,9)" fg:x="2280" fg:w="20"/><text x="91.4500%" y="495.50"></text></g><g><title>move_vm_runtime::interpreter::Interpreter::make_new_frame (40 samples, 1.60%)</title><rect x="92.0000%" y="485" width="1.6000%" height="15" fill="rgb(206,112,54)" fg:x="2300" fg:w="40"/><text x="92.2500%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (40 samples, 1.60%)</title><rect x="92.0000%" y="469" width="1.6000%" height="15" fill="rgb(216,84,49)" fg:x="2300" fg:w="40"/><text x="92.2500%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (40 samples, 1.60%)</title><rect x="92.0000%" y="453" width="1.6000%" height="15" fill="rgb(214,194,35)" fg:x="2300" fg:w="40"/><text x="92.2500%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (40 samples, 1.60%)</title><rect x="92.0000%" y="437" width="1.6000%" height="15" fill="rgb(249,28,3)" fg:x="2300" fg:w="40"/><text x="92.2500%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (40 samples, 1.60%)</title><rect x="92.0000%" y="421" width="1.6000%" height="15" fill="rgb(222,56,52)" fg:x="2300" fg:w="40"/><text x="92.2500%" y="431.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (40 samples, 1.60%)</title><rect x="92.0000%" y="405" width="1.6000%" height="15" fill="rgb(245,217,50)" fg:x="2300" fg:w="40"/><text x="92.2500%" y="415.50"></text></g><g><title>__rdl_alloc (20 samples, 0.80%)</title><rect x="93.6000%" y="277" width="0.8000%" height="15" fill="rgb(213,201,24)" fg:x="2340" fg:w="20"/><text x="93.8500%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.80%)</title><rect x="93.6000%" y="261" width="0.8000%" height="15" fill="rgb(248,116,28)" fg:x="2340" fg:w="20"/><text x="93.8500%" y="271.50"></text></g><g><title>move_vm_types::values::values_impl::Locals::new (40 samples, 1.60%)</title><rect x="93.6000%" y="485" width="1.6000%" height="15" fill="rgb(219,72,43)" fg:x="2340" fg:w="40"/><text x="93.8500%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (40 samples, 1.60%)</title><rect x="93.6000%" y="469" width="1.6000%" height="15" fill="rgb(209,138,14)" fg:x="2340" fg:w="40"/><text x="93.8500%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (40 samples, 1.60%)</title><rect x="93.6000%" y="453" width="1.6000%" height="15" fill="rgb(222,18,33)" fg:x="2340" fg:w="40"/><text x="93.8500%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 1.60%)</title><rect x="93.6000%" y="437" width="1.6000%" height="15" fill="rgb(213,199,7)" fg:x="2340" fg:w="40"/><text x="93.8500%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (40 samples, 1.60%)</title><rect x="93.6000%" y="421" width="1.6000%" height="15" fill="rgb(250,110,10)" fg:x="2340" fg:w="40"/><text x="93.8500%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (40 samples, 1.60%)</title><rect x="93.6000%" y="405" width="1.6000%" height="15" fill="rgb(248,123,6)" fg:x="2340" fg:w="40"/><text x="93.8500%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (40 samples, 1.60%)</title><rect x="93.6000%" y="389" width="1.6000%" height="15" fill="rgb(206,91,31)" fg:x="2340" fg:w="40"/><text x="93.8500%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (40 samples, 1.60%)</title><rect x="93.6000%" y="373" width="1.6000%" height="15" fill="rgb(211,154,13)" fg:x="2340" fg:w="40"/><text x="93.8500%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (40 samples, 1.60%)</title><rect x="93.6000%" y="357" width="1.6000%" height="15" fill="rgb(225,148,7)" fg:x="2340" fg:w="40"/><text x="93.8500%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (40 samples, 1.60%)</title><rect x="93.6000%" y="341" width="1.6000%" height="15" fill="rgb(220,160,43)" fg:x="2340" fg:w="40"/><text x="93.8500%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 1.60%)</title><rect x="93.6000%" y="325" width="1.6000%" height="15" fill="rgb(213,52,39)" fg:x="2340" fg:w="40"/><text x="93.8500%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 1.60%)</title><rect x="93.6000%" y="309" width="1.6000%" height="15" fill="rgb(243,137,7)" fg:x="2340" fg:w="40"/><text x="93.8500%" y="319.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 1.60%)</title><rect x="93.6000%" y="293" width="1.6000%" height="15" fill="rgb(230,79,13)" fg:x="2340" fg:w="40"/><text x="93.8500%" y="303.50"></text></g><g><title>__rust_alloc (20 samples, 0.80%)</title><rect x="94.4000%" y="277" width="0.8000%" height="15" fill="rgb(247,105,23)" fg:x="2360" fg:w="20"/><text x="94.6500%" y="287.50"></text></g><g><title>move_vm_runtime::interpreter::Interpreter::set_new_call_frame (260 samples, 10.40%)</title><rect x="85.6000%" y="517" width="10.4000%" height="15" fill="rgb(223,179,41)" fg:x="2140" fg:w="260"/><text x="85.8500%" y="527.50">move_vm_runtime..</text></g><g><title>move_vm_runtime::interpreter::Interpreter::make_call_frame (180 samples, 7.20%)</title><rect x="88.8000%" y="501" width="7.2000%" height="15" fill="rgb(218,9,34)" fg:x="2220" fg:w="180"/><text x="89.0500%" y="511.50">move_vm_ru..</text></g><g><title>move_vm_types::values::values_impl::Locals::store_loc (20 samples, 0.80%)</title><rect x="95.2000%" y="485" width="0.8000%" height="15" fill="rgb(222,106,8)" fg:x="2380" fg:w="20"/><text x="95.4500%" y="495.50"></text></g><g><title>move_vm_runtime::loader::Resolver::build_loaded_function_from_handle_and_ty_args (40 samples, 1.60%)</title><rect x="96.0000%" y="517" width="1.6000%" height="15" fill="rgb(211,220,0)" fg:x="2400" fg:w="40"/><text x="96.2500%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (40 samples, 1.60%)</title><rect x="96.0000%" y="501" width="1.6000%" height="15" fill="rgb(229,52,16)" fg:x="2400" fg:w="40"/><text x="96.2500%" y="511.50"></text></g><g><title>move_vm_runtime::interpreter::Interpreter::entrypoint (580 samples, 23.20%)</title><rect x="75.2000%" y="549" width="23.2000%" height="15" fill="rgb(212,155,18)" fg:x="1880" fg:w="580"/><text x="75.4500%" y="559.50">move_vm_runtime::interpreter::Interpr..</text></g><g><title>move_vm_runtime::interpreter::Interpreter::execute_main (580 samples, 23.20%)</title><rect x="75.2000%" y="533" width="23.2000%" height="15" fill="rgb(242,21,14)" fg:x="1880" fg:w="580"/><text x="75.4500%" y="543.50">move_vm_runtime::interpreter::Interpr..</text></g><g><title>move_vm_types::values::values_impl::Locals::drop_all_values (20 samples, 0.80%)</title><rect x="97.6000%" y="517" width="0.8000%" height="15" fill="rgb(222,19,48)" fg:x="2440" fg:w="20"/><text x="97.8500%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (20 samples, 0.80%)</title><rect x="97.6000%" y="501" width="0.8000%" height="15" fill="rgb(232,45,27)" fg:x="2440" fg:w="20"/><text x="97.8500%" y="511.50"></text></g><g><title>move_vm_runtime::session::Session::execute_function_bypass_visibility (1,000 samples, 40.00%)</title><rect x="59.2000%" y="597" width="40.0000%" height="15" fill="rgb(249,103,42)" fg:x="1480" fg:w="1000"/><text x="59.4500%" y="607.50">move_vm_runtime::session::Session::execute_function_bypass_visibi..</text></g><g><title>move_vm_runtime::runtime::VMRuntime::execute_function_instantiation (620 samples, 24.80%)</title><rect x="74.4000%" y="581" width="24.8000%" height="15" fill="rgb(246,81,33)" fg:x="1860" fg:w="620"/><text x="74.6500%" y="591.50">move_vm_runtime::runtime::VMRuntime::exe..</text></g><g><title>move_vm_runtime::runtime::VMRuntime::execute_function_impl (620 samples, 24.80%)</title><rect x="74.4000%" y="565" width="24.8000%" height="15" fill="rgb(252,33,42)" fg:x="1860" fg:w="620"/><text x="74.6500%" y="575.50">move_vm_runtime::runtime::VMRuntime::exe..</text></g><g><title>move_vm_runtime::runtime::VMRuntime::deserialize_args (20 samples, 0.80%)</title><rect x="98.4000%" y="549" width="0.8000%" height="15" fill="rgb(209,212,41)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (20 samples, 0.80%)</title><rect x="98.4000%" y="533" width="0.8000%" height="15" fill="rgb(207,154,6)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (20 samples, 0.80%)</title><rect x="98.4000%" y="517" width="0.8000%" height="15" fill="rgb(223,64,47)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (20 samples, 0.80%)</title><rect x="98.4000%" y="501" width="0.8000%" height="15" fill="rgb(211,161,38)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (20 samples, 0.80%)</title><rect x="98.4000%" y="485" width="0.8000%" height="15" fill="rgb(219,138,40)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (20 samples, 0.80%)</title><rect x="98.4000%" y="469" width="0.8000%" height="15" fill="rgb(241,228,46)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (20 samples, 0.80%)</title><rect x="98.4000%" y="453" width="0.8000%" height="15" fill="rgb(223,209,38)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (20 samples, 0.80%)</title><rect x="98.4000%" y="437" width="0.8000%" height="15" fill="rgb(236,164,45)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (20 samples, 0.80%)</title><rect x="98.4000%" y="421" width="0.8000%" height="15" fill="rgb(231,15,5)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.80%)</title><rect x="98.4000%" y="405" width="0.8000%" height="15" fill="rgb(252,35,15)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (20 samples, 0.80%)</title><rect x="98.4000%" y="389" width="0.8000%" height="15" fill="rgb(248,181,18)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.80%)</title><rect x="98.4000%" y="373" width="0.8000%" height="15" fill="rgb(233,39,42)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.80%)</title><rect x="98.4000%" y="357" width="0.8000%" height="15" fill="rgb(238,110,33)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.80%)</title><rect x="98.4000%" y="341" width="0.8000%" height="15" fill="rgb(233,195,10)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (20 samples, 0.80%)</title><rect x="98.4000%" y="325" width="0.8000%" height="15" fill="rgb(254,105,3)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (20 samples, 0.80%)</title><rect x="98.4000%" y="309" width="0.8000%" height="15" fill="rgb(221,225,9)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (20 samples, 0.80%)</title><rect x="98.4000%" y="293" width="0.8000%" height="15" fill="rgb(224,227,45)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="303.50"></text></g><g><title>move_vm_runtime::runtime::VMRuntime::deserialize_args::_{{closure}} (20 samples, 0.80%)</title><rect x="98.4000%" y="277" width="0.8000%" height="15" fill="rgb(229,198,43)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="287.50"></text></g><g><title>move_vm_runtime::runtime::VMRuntime::deserialize_arg (20 samples, 0.80%)</title><rect x="98.4000%" y="261" width="0.8000%" height="15" fill="rgb(206,209,35)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="271.50"></text></g><g><title>move_vm_runtime::loader::Loader::type_to_type_layout_with_identifier_mappings (20 samples, 0.80%)</title><rect x="98.4000%" y="245" width="0.8000%" height="15" fill="rgb(245,195,53)" fg:x="2460" fg:w="20"/><text x="98.6500%" y="255.50"></text></g><g><title>all (2,500 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(240,92,26)" fg:x="0" fg:w="2500"/><text x="0.2500%" y="927.50"></text></g><g><title>sample (2,500 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(207,40,23)" fg:x="0" fg:w="2500"/><text x="0.2500%" y="911.50">sample</text></g><g><title>_start (1,220 samples, 48.80%)</title><rect x="51.2000%" y="885" width="48.8000%" height="15" fill="rgb(223,111,35)" fg:x="1280" fg:w="1220"/><text x="51.4500%" y="895.50">_start</text></g><g><title>__libc_start_main (1,220 samples, 48.80%)</title><rect x="51.2000%" y="869" width="48.8000%" height="15" fill="rgb(229,147,28)" fg:x="1280" fg:w="1220"/><text x="51.4500%" y="879.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,220 samples, 48.80%)</title><rect x="51.2000%" y="853" width="48.8000%" height="15" fill="rgb(211,29,28)" fg:x="1280" fg:w="1220"/><text x="51.4500%" y="863.50">[libc.so.6]</text></g><g><title>main (1,180 samples, 47.20%)</title><rect x="52.8000%" y="837" width="47.2000%" height="15" fill="rgb(228,72,33)" fg:x="1320" fg:w="1180"/><text x="53.0500%" y="847.50">main</text></g><g><title>std::rt::lang_start_internal (1,180 samples, 47.20%)</title><rect x="52.8000%" y="821" width="47.2000%" height="15" fill="rgb(205,214,31)" fg:x="1320" fg:w="1180"/><text x="53.0500%" y="831.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,180 samples, 47.20%)</title><rect x="52.8000%" y="805" width="47.2000%" height="15" fill="rgb(224,111,15)" fg:x="1320" fg:w="1180"/><text x="53.0500%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,180 samples, 47.20%)</title><rect x="52.8000%" y="789" width="47.2000%" height="15" fill="rgb(253,21,26)" fg:x="1320" fg:w="1180"/><text x="53.0500%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,180 samples, 47.20%)</title><rect x="52.8000%" y="773" width="47.2000%" height="15" fill="rgb(245,139,43)" fg:x="1320" fg:w="1180"/><text x="53.0500%" y="783.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,160 samples, 46.40%)</title><rect x="53.6000%" y="757" width="46.4000%" height="15" fill="rgb(252,170,7)" fg:x="1340" fg:w="1160"/><text x="53.8500%" y="767.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,160 samples, 46.40%)</title><rect x="53.6000%" y="741" width="46.4000%" height="15" fill="rgb(231,118,14)" fg:x="1340" fg:w="1160"/><text x="53.8500%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,160 samples, 46.40%)</title><rect x="53.6000%" y="725" width="46.4000%" height="15" fill="rgb(238,83,0)" fg:x="1340" fg:w="1160"/><text x="53.8500%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,160 samples, 46.40%)</title><rect x="53.6000%" y="709" width="46.4000%" height="15" fill="rgb(221,39,39)" fg:x="1340" fg:w="1160"/><text x="53.8500%" y="719.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,160 samples, 46.40%)</title><rect x="53.6000%" y="693" width="46.4000%" height="15" fill="rgb(222,119,46)" fg:x="1340" fg:w="1160"/><text x="53.8500%" y="703.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::ca..</text></g><g><title>std::rt::lang_start::_{{closure}} (1,160 samples, 46.40%)</title><rect x="53.6000%" y="677" width="46.4000%" height="15" fill="rgb(222,165,49)" fg:x="1340" fg:w="1160"/><text x="53.8500%" y="687.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,160 samples, 46.40%)</title><rect x="53.6000%" y="661" width="46.4000%" height="15" fill="rgb(219,113,52)" fg:x="1340" fg:w="1160"/><text x="53.8500%" y="671.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,160 samples, 46.40%)</title><rect x="53.6000%" y="645" width="46.4000%" height="15" fill="rgb(214,7,15)" fg:x="1340" fg:w="1160"/><text x="53.8500%" y="655.50">core::ops::function::FnOnce::call_once</text></g><g><title>sample::main (1,160 samples, 46.40%)</title><rect x="53.6000%" y="629" width="46.4000%" height="15" fill="rgb(235,32,4)" fg:x="1340" fg:w="1160"/><text x="53.8500%" y="639.50">sample::main</text></g><g><title>sample::vm::run_func_M (1,160 samples, 46.40%)</title><rect x="53.6000%" y="613" width="46.4000%" height="15" fill="rgb(238,90,54)" fg:x="1340" fg:w="1160"/><text x="53.8500%" y="623.50">sample::vm::run_func_M</text></g><g><title>move_vm_test_utils::storage::InMemoryStorage::add_module_bytes (20 samples, 0.80%)</title><rect x="99.2000%" y="597" width="0.8000%" height="15" fill="rgb(213,208,19)" fg:x="2480" fg:w="20"/><text x="99.4500%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (20 samples, 0.80%)</title><rect x="99.2000%" y="581" width="0.8000%" height="15" fill="rgb(233,156,4)" fg:x="2480" fg:w="20"/><text x="99.4500%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (20 samples, 0.80%)</title><rect x="99.2000%" y="565" width="0.8000%" height="15" fill="rgb(207,194,5)" fg:x="2480" fg:w="20"/><text x="99.4500%" y="575.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (20 samples, 0.80%)</title><rect x="99.2000%" y="549" width="0.8000%" height="15" fill="rgb(206,111,30)" fg:x="2480" fg:w="20"/><text x="99.4500%" y="559.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (20 samples, 0.80%)</title><rect x="99.2000%" y="533" width="0.8000%" height="15" fill="rgb(243,70,54)" fg:x="2480" fg:w="20"/><text x="99.4500%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (20 samples, 0.80%)</title><rect x="99.2000%" y="517" width="0.8000%" height="15" fill="rgb(242,28,8)" fg:x="2480" fg:w="20"/><text x="99.4500%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (20 samples, 0.80%)</title><rect x="99.2000%" y="501" width="0.8000%" height="15" fill="rgb(219,106,18)" fg:x="2480" fg:w="20"/><text x="99.4500%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.80%)</title><rect x="99.2000%" y="485" width="0.8000%" height="15" fill="rgb(244,222,10)" fg:x="2480" fg:w="20"/><text x="99.4500%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.80%)</title><rect x="99.2000%" y="469" width="0.8000%" height="15" fill="rgb(236,179,52)" fg:x="2480" fg:w="20"/><text x="99.4500%" y="479.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.80%)</title><rect x="99.2000%" y="453" width="0.8000%" height="15" fill="rgb(213,23,39)" fg:x="2480" fg:w="20"/><text x="99.4500%" y="463.50"></text></g><g><title>malloc (20 samples, 0.80%)</title><rect x="99.2000%" y="437" width="0.8000%" height="15" fill="rgb(238,48,10)" fg:x="2480" fg:w="20"/><text x="99.4500%" y="447.50"></text></g><g><title>[libc.so.6] (20 samples, 0.80%)</title><rect x="99.2000%" y="421" width="0.8000%" height="15" fill="rgb(251,196,23)" fg:x="2480" fg:w="20"/><text x="99.4500%" y="431.50"></text></g></svg></svg>